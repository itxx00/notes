<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://itxx00.github.io/notes/blog</id>
    <title>老司机的文档集 Blog</title>
    <updated>2025-08-15T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://itxx00.github.io/notes/blog"/>
    <subtitle>老司机的文档集 Blog</subtitle>
    <icon>https://itxx00.github.io/notes/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[minio节点迁移]]></title>
        <id>https://itxx00.github.io/notes/blog/2025/08/15/minio-node-migration</id>
        <link href="https://itxx00.github.io/notes/blog/2025/08/15/minio-node-migration"/>
        <updated>2025-08-15T00:00:00.000Z</updated>
        <content type="html"><![CDATA[<p>minio节点迁移</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="1-备份">1. 备份<a href="https://itxx00.github.io/notes/blog/2025/08/15/minio-node-migration#1-%E5%A4%87%E4%BB%BD" class="hash-link" aria-label="1. 备份的直接链接" title="1. 备份的直接链接">​</a></h2>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">dir=/data</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mc mirror minio/ $dir/backup/minio_backup.$time --overwrite</span><br></span></code></pre></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="2-重建-pv">2. 重建 pv<a href="https://itxx00.github.io/notes/blog/2025/08/15/minio-node-migration#2-%E9%87%8D%E5%BB%BA-pv" class="hash-link" aria-label="2. 重建 pv的直接链接" title="2. 重建 pv的直接链接">​</a></h2>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">mkdir -p $dir/backup/minio_${minio_pod}_$time</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">cd $dir/backup/minio_${minio_pod}_$time</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">kubectl get pod ${minio_pod} -n ${minio_namespace} -o yaml &gt; minio-pod-${minio_pod}.yaml</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">minio_pvc=$(kubectl describe pod ${minio_pod} -n ${minio_namespace} | grep ClaimName | awk '{print $NF}')</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">echo ${minio_pvc}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">kubectl get pvc ${minio_pvc} -n ${minio_namespace} -o yaml &gt; minio-pvc-${minio_pvc}.yaml</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">minio_pv=$(kubectl describe pvc ${minio_pvc} -n ${minio_namespace} | grep Volume: | awk '{print $NF}')</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">echo ${minio_pv}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">local_dir=$(kubectl describe pv ${minio_pv} -n ${minio_namespace} | grep Path | awk '{print $NF}')</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">echo ${local_dir}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 备份pv</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">kubectl get pv ${minio_pv}  -o yaml &gt; minio-pv-${minio_pv}.yaml</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 编辑</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">cp minio-pv-${minio_pv}.yaml minio-pv-${minio_pv}-new.yaml</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">vi minio-pv-${minio_pv}-new.yaml</span><br></span></code></pre></div></div>
<div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">spec</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">nodeAffinity</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">required</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">nodeSelectorTerms</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">matchExpressions</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">key</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> kubernetes.io/hostname</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token key atrule" style="color:#00a4db">operator</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> In</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token key atrule" style="color:#00a4db">values</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> $</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">new_ip</span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># 删除pv，由于pv是绑定状态，需要手动Ctrl+C终止</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">kubectl delete pv ${minio_pv}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 修改pv,删除' - kubernetes.io/pv-protection'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">kubectl edit pv ${minio_pv}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 检查pv是否成功删除</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">kubectl get pv ${minio_pv}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 迁移后节点创建本地目录</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ansible ${new_ip} -m file -a "path=${local_dir} state=directory"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 重建pv</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">kubectl apply -f minio-pv-${minio_pv}-new.yaml</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 检查pv，要求状态为Bound</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">kubectl get pv ${minio_pv}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">status=$(kubectl get pv ${minio_pv} | grep -v NAME | awk '{print $5}')</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$status == "Bound"则符合预期</span><br></span></code></pre></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="3-重启-pod">3. 重启 pod<a href="https://itxx00.github.io/notes/blog/2025/08/15/minio-node-migration#3-%E9%87%8D%E5%90%AF-pod" class="hash-link" aria-label="3. 重启 pod的直接链接" title="3. 重启 pod的直接链接">​</a></h2>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">kubectl delete pod ${minio_pod} -n ${minio_namespace}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 检查pod状态</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">kubectl get pod ${minio_pod} -n ${minio_namespace} -owide</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">node=$(kubectl get pod ${minio_pod} -n ${minio_namespace} -owide | grep -v NAME | awk '{print $7}')</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$node == ${new_ip}则符合预期</span><br></span></code></pre></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="4-检查">4. 检查<a href="https://itxx00.github.io/notes/blog/2025/08/15/minio-node-migration#4-%E6%A3%80%E6%9F%A5" class="hash-link" aria-label="4. 检查的直接链接" title="4. 检查的直接链接">​</a></h2>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">mc admin info minio</span><br></span></code></pre></div></div>]]></content>
        <author>
            <name>老司机</name>
            <uri>https://github.com/itxx00</uri>
        </author>
        <category label="k8s" term="k8s"/>
        <category label="minio" term="minio"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[k8s基础知识总结]]></title>
        <id>https://itxx00.github.io/notes/blog/2025/08/07/k8s-basic</id>
        <link href="https://itxx00.github.io/notes/blog/2025/08/07/k8s-basic"/>
        <updated>2025-08-07T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[k8s 基础知识总结]]></summary>
        <content type="html"><![CDATA[<p>k8s 基础知识整理。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="kubernetes-模块架构">Kubernetes 模块架构<a href="https://itxx00.github.io/notes/blog/2025/08/07/k8s-basic#kubernetes-%E6%A8%A1%E5%9D%97%E6%9E%B6%E6%9E%84" class="hash-link" aria-label="Kubernetes 模块架构的直接链接" title="Kubernetes 模块架构的直接链接">​</a></h2>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">+-----------------------------------------------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|                     Kubernetes Cluster              |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|                                                     |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  +------------------+      +--------------------+   |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  |   Master Node    |      |    Worker Node(s)   |  |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  |                  |      |                     |  |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  |  +------------+  |      |  +---------------+  |  |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  |  | API Server |&lt;---------&gt;| Kubelet         | |  |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  |  +------------+  |      |  +---------------+  |  |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  |                  |      |                     |  |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  |  +------------+  |      |  +---------------+  |  |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  |  | Controller |  |      |  |  Container     | |  |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  |  | Manager    |  |      |  |  Runtime       | |  |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  |  +------------+  |      |  +---------------+  |  |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  |                  |      |                     |  |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  |  +------------+  |      +--------------------+   |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  |  | Scheduler  |  |                               |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  |  +------------+  |                               |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  |                  |                               |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  |  +------------+  |                               |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  |  | etcd       |  |                               |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  |  +------------+  |                               |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  +------------------+                               |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|                                                     |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  +------------------+                               |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  | Add-ons          |                               |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  |  - DNS           |                               |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  |  - Dashboard     |                               |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  |  - Network Plugin|                               |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  +------------------+                               |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+-----------------------------------------------------+</span><br></span></code></pre></div></div>
<p>Master Node：负责集群的管理和控制，包含 API Server、Controller Manager、Scheduler 和 etcd（分布式键值存储）。
Worker Node：负责运行容器化应用，包含 Kubelet（节点代理）、容器运行时（如 containerd、Docker）等。
Add-ons：集群附加组件，如 DNS 服务、Dashboard、网络插件等。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="kubernetes-组件">Kubernetes 组件<a href="https://itxx00.github.io/notes/blog/2025/08/07/k8s-basic#kubernetes-%E7%BB%84%E4%BB%B6" class="hash-link" aria-label="Kubernetes 组件的直接链接" title="Kubernetes 组件的直接链接">​</a></h2>
<ul>
<li>API Server：负责提供 Kubernetes API 服务，包括创建、更新、删除、查询等操作。</li>
<li>Controller Manager：负责管理控制器，包括节点控制器、副本控制器、服务控制器等。</li>
<li>Scheduler：负责调度 Pod 到合适的节点上。</li>
<li>Kubelet：负责管理节点上的容器化应用，包括启动、停止、重启等操作。</li>
<li>Container Runtime：负责管理容器，包括启动、停止、重启等操作。</li>
<li>etcd：分布式键值存储，用于存储 Kubernetes 集群的状态信息。</li>
<li>Add-ons：集群附加组件，如 DNS 服务、Dashboard、网络插件等。</li>
<li>Kube-proxy：负责实现 Kubernetes 服务发现和负载均衡，将服务请求路由到正确的 Pod。</li>
<li>CNI（Container Network Interface）：负责为容器提供网络功能，如创建网络命名空间、配置 IP 地址、路由表等。</li>
<li>Kube-dns：负责为 Kubernetes 集群中的服务提供 DNS 解析服务。</li>
<li>Ingress Controller：负责处理外部流量进入集群的流量路由和负载均衡。</li>
<li>Dashboard：提供 Web 界面，用于可视化管理和监控 Kubernetes 集群。</li>
<li>Logging and Monitoring：负责收集和分析容器的日志，提供监控和报警功能。</li>
<li>Helm：用于管理 Kubernetes 应用的包管理器，类似于 Linux 系统中的 apt 或 yum。</li>
<li>Prometheus：用于监控和报警，提供指标收集和查询功能。</li>
<li>Grafana：用于可视化监控数据，支持多种数据源，如 Prometheus、InfluxDB 等。</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="k8s-常见资源类型">k8s 常见资源类型<a href="https://itxx00.github.io/notes/blog/2025/08/07/k8s-basic#k8s-%E5%B8%B8%E8%A7%81%E8%B5%84%E6%BA%90%E7%B1%BB%E5%9E%8B" class="hash-link" aria-label="k8s 常见资源类型的直接链接" title="k8s 常见资源类型的直接链接">​</a></h2>
<ul>
<li>
<p>Pod
Pod也叫容器组，是Kubernetes中最小的可部署单元，它是一个或多个相关容器的组合。Pod中的容器共享网络和存储资源，并在同一主机上运行。Pod由Kubernetes调度器分配给节点，并使用Linux命名空间和cgroups来隔离容器。</p>
</li>
<li>
<p>Deployment
Deployment用于管理无状态Pod的创建和更新。它通过控制器模式（ReplicaSet）来确保指定数量的Pod副本在集群中运行。当需要进行扩展、回滚或更新时，Deployment会创建新的Pod，并逐步替换旧的Pod。</p>
</li>
<li>
<p>Service
Service提供了一种稳定的网络访问方式，用于暴露Pod或一组Pod的网络服务。Service通过标签选择器（Label Selector）将请求路由到后端Pod。它使用Kubernetes的服务发现机制，通过集群内部的DNS或负载均衡器将请求转发到正确的Pod。</p>
</li>
<li>
<p>Ingress
Ingress是一种规则集合，用于将外部请求路由到集群内部的Service。它充当了集群外部和集群内部之间的入口点。Ingress控制器根据Ingress规则将请求转发到相应的Service，并处理负载均衡、SSL终止和路径匹配等功能。</p>
</li>
<li>
<p>ConfigMap
ConfigMap用于存储应用程序的配置数据，如环境变量、配置文件等。它将配置数据存储为键值对，并将其注入到Pod的容器中。容器可以通过环境变量或挂载文件的方式访问ConfigMap中的配置数据。</p>
</li>
<li>
<p>Secret
Secret用于存储敏感数据，如密码、令牌等。读取Secret时默认以Base64编码的形式从 etcd 中取出，并可以被Pod中的容器使用。Secret可以用于安全地传递敏感信息，如数据库密码或API密钥，需要注意的是 k8s 并不默认提供对 secrets 的加密，需要自己实现密钥管理服务（Key Management Service，KMS）。</p>
</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="pod-创建过程">pod 创建过程<a href="https://itxx00.github.io/notes/blog/2025/08/07/k8s-basic#pod-%E5%88%9B%E5%BB%BA%E8%BF%87%E7%A8%8B" class="hash-link" aria-label="pod 创建过程的直接链接" title="pod 创建过程的直接链接">​</a></h2>
<p>创建 pod 的流程大致如下：</p>
<ol>
<li>当执行 kubectl create deploy 时，k8s 执行的流程如下：</li>
<li>kubectl 执行客户端校验，资源类型、镜像名称等</li>
<li>Kubectl 读取.kube/config获取认证信息，kube-apiserver 地址</li>
<li>kubectl 生成请求内容并往 apiserver 发送创建请求</li>
<li>kube-apiserver 通过认证和鉴权后将信息存储至 etcd</li>
<li>kube-controller-manager监听到 deploy create events，检查相关资源是否已经存在</li>
<li>Deployment controller 创建 ReplicaSets，replicaset controller 创建 pods，存入 etcd，pod 进入 pending 状态</li>
<li>kube-scheduler监听到 pod 未分配节点，开始选择合适的节点，发送 POST 请求给 apiserver</li>
<li>kube-apiserver 将 pod 状态标记为 scheduled</li>
<li>kubelet 轮询 kube-apiserver 获取 pod 信息，开始创建 cgroup，创建数据目录，调用 CRI （container runtime interface）创建 container</li>
<li>创建 pause 容器，kubelet 通过 CNI（container network interface）创建网络</li>
<li>kubelet 从镜像仓库拉取pod 的镜像，通过 CRI 插件创建 container
以上仅是对关键步骤的简要描述，实际情况要复杂得多。</li>
</ol>
<p>docker、containerd、runc 是什么关系？
containerd、runc 由 docker 拆分出来，runc 是一个标准的OCI runtime实现，containerd 支持多种OCI runtime 实现，对应 runc 的支持提供了 containerd-shim-runc-v2,一个容器的创建具体过程如下：</p>
<!-- -->
<p>k8s v1.19版本，kubelet 使用 docker-shim与 dockerd 通信，k8s自 v1.20版本开始建议使用 containerd-shim，1.24 版本彻底废弃 docker-shim。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="canal">Canal<a href="https://itxx00.github.io/notes/blog/2025/08/07/k8s-basic#canal" class="hash-link" aria-label="Canal的直接链接" title="Canal的直接链接">​</a></h2>
<p>Canal 是一个 CNI 网络插件，它很好地结合了 Flannel 和 Calico 的优点。它让你轻松地将 Calico 和 Flannel 网络部署为统一的网络解决方案，将 Calico 的网络策略执行与 Calico（未封装）和 Flannel（封装）丰富的网络连接选项结合起来。
Canal 是 Rancher 默认的 CNI 网络插件，并采用了 Flannel 和 VXLAN 封装。
CNI（容器网络接口）是一个云原生计算基金会项目，它包含了一些规范和库，用于编写在 Linux 容器中配置网络接口的一系列插件。CNI 只关注容器的网络连接，并在容器被删除时移除所分配的资源。
Kubernetes 使用 CNI 作为网络提供商和 Kubernetes Pod 网络之间的接口。
Canal 架构
Flannel 是为 Kubernetes 配置 L3 网络结构的简单方法。Flannel 在每台主机上运行一个名为 flanneld 的二进制 Agent，该 Agent 负责从更大的预配置地址空间中为每台主机分配子网租约。Flannel 通过 Kubernetes API 或直接使用 etcd 来存储网络配置、分配的子网、以及其他辅助数据（例如主机的公共 IP）。数据包使用某种后端机制来转发，默认封装为 VXLAN。</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">+-------------------------------------------------------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|                         Master Node                         |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|                                                             |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  +-----------+     +-----------+       +----------------+   |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  | Kubelet   | --&gt; | Scheduler |       | Controller     |   |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  +-----------+     +-----------+       | Manager        |   |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|           \            |               +----------------+   |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|            \           |                      |             |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|             \          |                      |             |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|              \         |                      v             |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|               \        +-----------------&gt; API Server &lt;-----+ &lt;-- kubectl</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|                \                       /     ^       ^      |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|                 \                     /      |       |      |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|                  \                   /       |       |      |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|                   \                 /        |       |      |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|                    \               /         |       |      |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|                     v             v          |       |      |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|                    etcd &lt;---------+          |       |      |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|                      ^                       |       |      |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|                      |                       |       |      |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|                   Proxy &lt;--------------------+       |      |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|                      |                               |      |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+-------------------------------------------------------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+-------------------------------------------------------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|                        Worker Nodes                         |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|                                                             |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  +-----------+     +-----------+       +----------------+   |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  | Kubelet   | --&gt; | Proxy     |       | Flannel        |   |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  +-----------+     +-----------+       +----------------+   |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|       |                |                     |              |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|       v                |                     |              |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|    Docker             &lt;----------------------+              |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|       |                          10.0.0.0/8 (Flannel 网络)  |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|       v                                                     |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|    PODs --------------------------------------------&gt; PODs  |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+-------------------------------------------------------------+</span><br></span></code></pre></div></div>
<p>说明：</p>
<ul>
<li>Master Node 负责集群管理，包括 Kubelet、Scheduler、Controller Manager、API Server、etcd 和 Proxy。</li>
<li>Worker Nodes 运行应用容器，包含 Kubelet、Proxy、Docker 和 POD。</li>
<li>Flannel 负责跨节点网络通信，使用 10.0.0.0/8 网段。</li>
<li>kubectl 通过 API Server 与集群交互。</li>
<li>流量（traffic）在 Proxy 之间传递。</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="pod网络通信">pod网络通信<a href="https://itxx00.github.io/notes/blog/2025/08/07/k8s-basic#pod%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1" class="hash-link" aria-label="pod网络通信的直接链接" title="pod网络通信的直接链接">​</a></h2>
<p>pod 是如何与外部通信的？</p>
<p>CNI 插件为每个节点分配一个/24网段，例如10.42.0.0/24 10.42.1.0/24，每个 pod 分配一个该节点持有网段的 ip 地址；每个 pod 内有一个 eth0 虚拟网卡，同时宿主机中有与其配对的另外一个虚拟网卡，二者同属一个 network namespace，这种成对出现的网卡叫veth pair，两者可以相互通信，就好比有一根网线一头连接你的电脑网卡，另一头连接交换机。以下面 pod 举例说明：</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">[k8s@k8s-192-168-4-88 ~]$ kubectl -n k8s get pod -owide | grep 192.168.4.88</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">k8s-xxx-648c86cd45-qbhj9      1/1     Running   0          43d       10.42.4.15     192.168.4.88</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[k8s@k8s-192-168-4-88 ~]$</span><br></span></code></pre></div></div>
<p>节点上查看 pod 对应的 container 如下，与这个 pod 有关的 container 有两个，一个是业务进程本身，一个是/pause进程,查看 pod 内的网卡如下：</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">[k8s@k8s-192-168-4-88 ~]$ kubectl -n k8s exec k8s-xxx-648c86cd45-qbhj9 -- ip a</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN qlen 1000</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    inet 127.0.0.1/8 scope host lo</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       valid_lft forever preferred_lft forever</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">3: eth0@if52: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1450 qdisc noqueue state UP</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    link/ether be:67:6a:d4:65:98 brd ff:ff:ff:ff:ff:ff</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    inet 10.42.4.15/32 brd 10.42.4.15 scope global eth0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       valid_lft forever preferred_lft forever</span><br></span></code></pre></div></div>
<p>宿主机上的peer veth 如下：</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">[k8s@k8s-192-168-4-88 ~]$ ip l | grep ^52:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">52: cali18e95c70453@if3: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1450 qdisc noqueue state UP mode DEFAULT group default</span><br></span></code></pre></div></div>
<p>可以看到 pod 中的网卡名，他有固定的命名规则，带了对端网卡的 index 编号 52，在宿主机上查看 index 编号为 52 的网卡名为cali18e95c70453， pod 的网络包收发都会经过宿主机上的cali18e95c70453网卡，可以抓包验证一下：</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">[k8s@k8s-192-168-4-88 ~]$ kubectl -n k8s exec -it k8s-xxx-648c86cd45-qbhj9 -- curl xxx.com</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;html&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;head&gt;&lt;title&gt;301 Moved Permanently&lt;/title&gt;&lt;/head&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;center&gt;&lt;h1&gt;301 Moved Permanently&lt;/h1&gt;&lt;/center&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;hr&gt;&lt;center&gt;TLB&lt;/center&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/html&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[k8s@k8s-192-168-4-88 ~]$</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[k8s@k8s-192-168-4-88 ~]$ sudo tcpdump -nnpA -i cali18e95c70453 tcp dst port 80</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">tcpdump: verbose output suppressed, use -v or -vv for full protocol decode</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">listening on cali18e95c70453, link-type EN10MB (Ethernet), capture size 262144 bytes</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">15:59:43.723438 IP 10.42.4.15.49848 &gt; 122.14.236.25.80: Flags [S], seq 2904204625, win 28200, options [mss 1410,sackOK,TS val 3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">E...&lt;.M@.@..</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">*..z.......P...Q.......n(t.........</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">..U........</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">15:59:43.750376 IP 10.42.4.15.49848 &gt; 122.14.236.25.80: Flags [.], ack 3650196656, win 221, options [nop,nop,TS val 3808777527</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">E..4.N@.@...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">*..z.......P...R.......t.......</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">..U7{...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">15:59:43.750434 IP 10.42.4.15.49848 &gt; 122.14.236.25.80: Flags [P.], seq 0:77, ack 1, win 221, options [nop,nop,TS val 380877752</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">E....O@.@...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">*..z.......P...R.......t.......</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">..U7{...GET / HTTP/1.1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Host: xxx.com</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">User-Agent: curl/8.5.0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Accept: */*</span><br></span></code></pre></div></div>
<p>pod 与 pod 之间是如何通信的呢？首先宿主机的路由表如下：</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">default via 192.168.4.1 dev eth0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">10.42.0.0/24 via 10.42.0.0 dev flannel.1 onlink</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">10.42.1.0/24 via 10.42.1.0 dev flannel.1 onlink</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">10.42.2.0/24 via 10.42.2.0 dev flannel.1 onlink</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">10.42.3.0/24 via 10.42.3.0 dev flannel.1 onlink</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">10.42.5.0/24 via 10.42.5.0 dev flannel.1 onlink</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">10.42.4.15 dev cali18e95c70453 scope link </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">169.254.0.0/16 dev eth0 scope link metric 1002</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">172.17.0.0/16 dev docker0 proto kernel scope link src 172.17.0.1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">192.168.4.0/24 dev eth0 proto kernel scope link src 192.168.4.88</span><br></span></code></pre></div></div>
<p>可以看到和其他宿主机的 pod  ip 段是通过flannel.1网卡发送，再看一下邻居表：</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">10.42.2.0 dev flannel.1 lladdr 62:6d:e7:6f:f3:e9 PERMANENT</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">10.42.1.0 dev flannel.1 lladdr 9a:b6:27:23:b2:21 PERMANENT</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">10.42.0.0 dev flannel.1 lladdr a6:eb:6d:4e:48:3a PERMANENT</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">10.42.3.0 dev flannel.1 lladdr 16:8e:4f:5c:1e:63 PERMANENT</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">10.42.5.0 dev flannel.1 lladdr 0a:14:55:b6:2e:97 PERMANENT</span><br></span></code></pre></div></div>
<p>由此可知当发送往其他节点pod的数据包到达flannel.1网卡时，每个网段都对应有一条目标 mac 地址，而这些 mac 地址就是每个宿主机节点上 flannel.1网卡的 mac。
另外需要注意的是上面 pod 的 container 中有一个启动了/pause进程的 container，又叫 infra container 基础容器，他的镜像由 kubelet 指定：</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">kubelet --infra-container-image=k8s.gcr.io/pause:3.2</span><br></span></code></pre></div></div>
<p>Infra container的作用是实现 pod 内多个容器之间的存储、网络等资源的共享，单独一个 pause 容器的好处是他里面没有任何业务逻辑不容易挂掉，使得 namespace 共享更加稳定。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="kube-proxy">kube-proxy<a href="https://itxx00.github.io/notes/blog/2025/08/07/k8s-basic#kube-proxy" class="hash-link" aria-label="kube-proxy的直接链接" title="kube-proxy的直接链接">​</a></h2>
<p>简介
来自 k8s 官网对 kube-proxy 的定义：Kubernetes 网络代理在每个节点上运行。网络代理反映了每个节点上 Kubernetes API 中定义的服务，并且可以执行简单的 TCP、UDP 和 SCTP 流转发，或者在一组后端进行 循环 TCP、UDP 和 SCTP 转发。 当前可通过 Docker-links-compatible 环境变量找到服务集群 IP 和端口， 这些环境变量指定了服务代理打开的端口。 有一个可选的插件，可以为这些集群 IP 提供集群 DNS。 用户必须使用 apiserver API 创建服务才能配置代理。
简言之， kube-proxy 的作用是承载 k8s svc的流量转发，将请求往 svc ip<!-- -->:port<!-- -->的流量转发到 podip<!-- -->:port<!-- -->上，同时还提供负载均衡与健康检查机制。</p>
<p>部署架构:</p>
<!-- -->
<p>linux 系统中的kube-proxy 支持多种代理模式，userspace、iptables 和 ipvs，userspace 模式属于早期实现的方案，因为性能原因已经逐渐弃用，iptables 模式通过 iptables 实现数据包转发，但不具备负载均衡能力且规模上去之后 iptables 规则太多也会引发性能问题，目前 k8s 中使用的是 ipvs 模式，可以通过启动参数看到：</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">[k8s@k8s-192-168-4-86 ~]$ ps aux|grep kube-proxy</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">k8s  80898  0.0  0.0 112816   988 pts/1    S+   23:17   0:00 grep --color=auto kube-proxy</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">root     196678  0.2  0.0 750776 31484 ?        Ssl  Jun18  191:02 kube-proxy --feature-gates=TTLAfterFinished=true --proxy-mode=ipvs --cluster-cidr=10.42.0.0/16 --xy.yaml --healthz-bind-address=127.0.0.1 --v=2</span><br></span></code></pre></div></div>
<p>ipvs 是 linux kernel 中的模块，具备负载均衡能力的同时还能获得不错的转发性能。ipvs 模块来自于 lvs 项目，lvs 项目诞生于 1998 年，ipvs 模块最新版本为 v1.2 发布于 2004 年，距今已经稳定运行20 年。值得一提的是 lvs 项目的创立者章文嵩博士，他的贡献使得  ipvs 成为了负载均衡领域的重要技术，对互联网基础设施的发展产生了积极深远的影响。</p>
<p>数据流向:</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">+---------------------------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|             Node                |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  +----------+  +------------+   |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  |  Client  |  | kube-proxy |---+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  +----------+  +------------+   |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|           \           /         |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|            \         /          |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|        +----------------+       |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|        |   clusterIP    |       |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|        | (Virtual Server)|      |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|        +----------------+       |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+------------------------------+  |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                      -           |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          +-----------------------+-----------------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          |           -           |                       |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+----------------+  +----------------+  +-----------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| Backend Pod 1  |  | Backend Pod 2  |  | Backend Pod 3   |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| (Real Server)  |  | (Real Server)  |  | (Real Server)   |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+----------------+  +----------------+  +-----------------+</span><br></span></code></pre></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="svc实现机制">svc实现机制<a href="https://itxx00.github.io/notes/blog/2025/08/07/k8s-basic#svc%E5%AE%9E%E7%8E%B0%E6%9C%BA%E5%88%B6" class="hash-link" aria-label="svc实现机制的直接链接" title="svc实现机制的直接链接">​</a></h2>
<p>在 k8s 中，有以下几种类型的 Service：</p>
<ol>
<li>ClusterIP：ClusterIP 是默认的 Service 类型，它为 Service 分配一个 Cluster IP 地址，并在集群内部提供负载均衡。当请求发送到 ClusterIP 地址时，k8s 的内部负载均衡机制将流量转发到后端 Pod。</li>
<li>NodePort：NodePort 类型的 Service 具有 ClusterIP 的所有功能，并且还会在每个节点上打开一个静态端口，将流量转发到 Service。当请求发送到任何节点的 NodePort 端口时，k8s 会将流量转发到相应的 Service。</li>
<li>LoadBalancer：LoadBalancer 类型的 Service 通过云服务提供商的负载均衡器（如 AWS ELB、GCP GCLB）来公开 Service。负载均衡器会将流量转发到后端 Pod。</li>
<li>ExternalName：ExternalName 类型的 Service 允许将 Service 映射到集群外部的任意 DNS 名称。它不提供负载均衡功能，只是通过 CNAME 记录将 Service 名称解析为外部 DNS 名称。</li>
<li>Headless Service：无头服务，是 k8s 中的一种特殊类型的 Service，它与其他类型的 Service（如 ClusterIP、NodePort、LoadBalancer）有所不同。Headless Service 不会为 Service 分配 Cluster IP，而是通过 DNS 记录直接暴露后端 Pod 的网络地址。
ClusterIP svc的请求转发过程：
有 svc 如下:</li>
</ol>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">[k8s@k8s-192-168-4-86 ~]$ kubectl -n k8s get svc backend-service -owide</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">NAME             TYPE       CLUSTER-IP     EXTERNAL-IP   PORT(S)      AGE    SELECTOR</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">backend-service   ClusterIP  10.43.199.15   &lt;none&gt;        18888/TCP   44d    app=backend-service</span><br></span></code></pre></div></div>
<p>该 svc 的 clusterip 为 10.43.199.15，外部端口和内部端口一样为 18888，对应的后端 pod 的 app label 是 backend-service。10.43.199.15是一个虚拟机 IP（VIP），kube-proxy 会把这个 ip 绑定在每个节点上，</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">[k8s@k8s-192-168-4-86 ~]$ run 'ip -o a |grep 10.43.199.15'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">192.168.4.87    43: kube-ipvs0    inet 10.43.199.15/32 scope global kube-ipvs0\       valid_lft forever preferred_lft forever</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">192.168.4.91    33: kube-ipvs0    inet 10.43.199.15/32 scope global kube-ipvs0\       valid_lft forever preferred_lft forever</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">192.168.4.90    15: kube-ipvs0    inet 10.43.199.15/32 scope global kube-ipvs0\       valid_lft forever preferred_lft forever</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">192.168.4.88    23: kube-ipvs0    inet 10.43.199.15/32 scope global kube-ipvs0\       valid_lft forever preferred_lft forever</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">192.168.4.89    33: kube-ipvs0    inet 10.43.199.15/32 scope global kube-ipvs0\       valid_lft forever preferred_lft forever</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">192.168.4.86    15: kube-ipvs0    inet 10.43.199.15/32 scope global kube-ipvs0\       valid_lft forever preferred_lft forever</span><br></span></code></pre></div></div>
<p>接着 kube-proxy 会通过 apiserver 找到 label app=backend-service的后端服务 endpoints，是 pod 的内网 ip+端口，</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">[k8s@k8s-192-168-4-86 ~]$ kubectl -n k8s get pod -o wide -l app=backend-service</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">NAME                                READY   STATUS    RESTARTS   AGE   IP           NODE           NOMINATED NODE   READINESS GATES</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">backend-service-555d6684b5-9kwc7    1/1     Running   0          31d   10.42.3.171  192.168.4.90   &lt;none&gt;           &lt;none&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">backend-service-555d6684b5-s7n9n    1/1     Running   0          31d   10.42.0.134  192.168.4.91   &lt;none&gt;           &lt;none&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```text</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[k8s@k8s-192-168-4-86 ~]$ kubectl -n k8s get ep backend-service</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">NAME             ENDPOINTS                        AGE</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">backend-service   10.42.0.134:18888,10.42.3.171:18888   44d</span><br></span></code></pre></div></div>
<p>接着，kube-proxy 通过创建 ipvs 规则，将发往 VIP的流量转发到后端 realserver,</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">[k8s@k8s-192-168-4-86 ~]$ sudo ipvsadm -Ln|grep -A2 10.43.199.15</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">TCP  10.43.199.15:18888 rr</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  -&gt; 10.42.0.134:18888  Masq    1    0    0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  -&gt; 10.42.3.171:18888  Masq    1    0    0</span><br></span></code></pre></div></div>
<p>自此，整个链路就打通了。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="ingress">ingress<a href="https://itxx00.github.io/notes/blog/2025/08/07/k8s-basic#ingress" class="hash-link" aria-label="ingress的直接链接" title="ingress的直接链接">​</a></h2>
<p>ingress 正如其字面意思，是 k8s 对外的流量入口，除了支持 http 流量外也支持 tcp、udp 流量转发。
ingress-nginx 是其中一种controller实现，除了 nginx 的实现以外还有其他很多 ingress controller实现例如haproxy、apisix、kong等，k8s 中使用的是nginx-ingress-controller。</p>
<p>数据流向:</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">+------------------------+          +-----------------------+          +-------------------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| Kubernetes Cluster SVC |&lt;---------|  Ingress Controller   |&lt;---------|  Load Balancer          |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+------------------------+          +-----------------------+          +-------------------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          ^                                ^     |                              ^</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          |                                |     | leader                       |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          |                                |     |                              |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          | expose business service        |     |                              | access FQDN</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          |                                |     |                              |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+-----------------------+          +------------------------+          +-------------------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| business logic POD    |          | Kubernetes NodePort SVC|          | Client                  |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+-----------------------+          +------------------------+          +-------------------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                       ^</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                       |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                       | access business svc</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                       |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                       |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                           +------------------------------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                           | control plane (green dashed lines) |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                           +------------------------------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                           | data plane (red solid lines)       |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                           +------------------------------------+</span><br></span></code></pre></div></div>
<p>Additional notes:</p>
<ul>
<li>The Ingress Controller gets endpoints &amp; generates config file from Kubernetes Cluster SVC.</li>
<li>The Ingress Controller exposes ingress service to Kubernetes NodePort SVC.</li>
<li>The Load Balancer accesses the Kubernetes NodePort SVC.</li>
<li>The Client accesses the Load Balancer via FQDN.</li>
<li>The Load Balancer accesses the business service via Kubernetes NodePort SVC.</li>
<li>The business logic POD is exposed by the Kubernetes Cluster SVC.</li>
</ul>
<p>数据平面：
客户端发送 http 请求至 LB，LB 转发流量至ingress-nginx NodePort svc，由nginx-ingress-controller pod 中的 nginx 进程接收这些流量，nginx 进程充当反向代理的角色，默认情况下nginx 是直接转发至各业务 svc 对应的 endpoints，而非svc 本身，这样做的好处是流量绕过 kube-proxy 流程，缩短链路。这一行为可通过nginx.ingress.kubernetes.io/service-upstream注解控制。
控制平面：
nginx-ingress-controller pod 中除了 nginx进程以外还有负责控制面的 nginx-ingress-controller 进程，</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"> [k8s@k8s-192-168-4-86 ~]$ kubectl -n ingress-nginx exec -it nginx-ingress-controller-68c566495-hj457 -- ps aux</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PID   USER      TIME  COMMAND</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">1     www-data  0:00  /usr/bin/dumb-init -- /nginx-ingress-controller --default-</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">7     www-data  4h40  /nginx-ingress-controller --default-backend-service=ingres</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">50    www-data  0:13  nginx: master process /usr/local/nginx/sbin/nginx -c /etc/ng</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">38549 www-data  0:41  nginx: worker process</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">38550 www-data  0:39  nginx: worker process</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">38583 www-data  0:38  nginx: worker process</span><br></span></code></pre></div></div>
<p>当 pod 拉起时通过注册并 lock ingress-controller-leader-nginx configmap 选主，只有一个 Pod 能够成功创建 ConfigMap，成为主节点。其他 Pod 会检测到 ConfigMap 已经存在，并成为从节点。</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">[k8s@k8s-192-168-4-86 ~]$ kubectl -n ingress-nginx get cm ingress-controller-leader-nginx -o yaml</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">apiVersion: v1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">kind: ConfigMap</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">metadata:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  annotations:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    control-plane.alpha.kubernetes.io/leader: '{"holderIdentity":"nginx-ingress-controller-7p6wd","leaseDurationSeconds":30,"acquireTime":"2024-07-31T12:31:56Z","renewTime":"2024-07-31T13:44:30Z","leaderTransitions":4}'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  creationTimestamp: "2024-06-18T01:23:07Z"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">managedFields:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">- apiVersion: v1</span><br></span></code></pre></div></div>
<p>主节点负责监听 k8s API Server 中的 Ingress 资源，并根据配置规则进行流量转发。从节点会复制主节点的配置，并等待主节点不可用时接管流量转发任务。如果主节点发生故障重启等，超过 30 秒从节点就会检测到主节点不可用，并开始竞选新的主节点。</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="使用示例">使用示例<a href="https://itxx00.github.io/notes/blog/2025/08/07/k8s-basic#%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B" class="hash-link" aria-label="使用示例的直接链接" title="使用示例的直接链接">​</a></h3>
<p>以下 demo 演示如何创建 ingress以及对应的 svc、endpoint 资源，并对外提供访问：</p>
<div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">---</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">apiVersion</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> v1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">kind</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> Service</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">metadata</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> laosiji</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">namespace</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> default</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">spec</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">type</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> ClusterIP</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">ports</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">port</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">6666</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">---</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">apiVersion</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> v1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">kind</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> Endpoints</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">metadata</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> laosiji</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">namespace</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> default</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">subsets</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">addresses</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">ip</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> 192.168.4.86</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">ports</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">port</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">6666</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">---</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">apiVersion</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> networking.k8s.io/v1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">kind</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> Ingress</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">metadata</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> laosiji</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">ingress</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">namespace</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> default</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">spec</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">rules</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">host</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> siji.example.com</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">http</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">paths</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">pathType</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> Prefix</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token key atrule" style="color:#00a4db">path</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> /</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token key atrule" style="color:#00a4db">backend</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token key atrule" style="color:#00a4db">service</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> laosiji</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token key atrule" style="color:#00a4db">port</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              </span><span class="token key atrule" style="color:#00a4db">number</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">6666</span><br></span></code></pre></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="coredns">Coredns<a href="https://itxx00.github.io/notes/blog/2025/08/07/k8s-basic#coredns" class="hash-link" aria-label="Coredns的直接链接" title="Coredns的直接链接">​</a></h2>
<p>coredns 是k8s 生态中原生服务发现的实现方案，插件化设计，一个功能对应一个插件，高度灵活可扩展，支持自定义插件开发。coredns 可以为 svc、sts、pod 等提供域名解析。</p>
<p>解析流程:</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">+-------------------------------------------------------------+     +----------------------------------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|                      Kubernetes node A                      |     |             Kubernetes node B          |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|                                                             |     |                                        |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  +----------------------+                                   |     |  +----------------------+              |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  |       Pod foo        |                                   |     |  |      node's          |              |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  |                      |                                   |     |  |    resolv.conf       |              |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  |  +----------------+  |                                   |     |  +----------------------+              |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  |  |  Application   |  |                                   |     |                                        |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  |  +----------------+  |                                   |     |                                        |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  |          |           |                                   |     |                                        |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  | Initiates DNS lookup |                                   |     |                                        |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  |          v           |                                   |     |                                        |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  |  +----------------+  |                                   |     |                                        |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  |  | DNS resolver   |  |                                   |     |                                        |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  |  +----------------+  |                                   |     |                                        |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  |          |           |                                   |     |                                        |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  | Uses the DNS server  |                                   |     |                                        |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  | specified in         |                                   |     |                                        |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  |          v           |                                   |     |                                        |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  |  +----------------+  |            Points to              |     |  +----------------+                    |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  |  |  resolv.conf   |  | ---------------------------------&gt;|----&gt;|  |   CoreDNS      |                    |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  |  +----------------+  |                                   |     |  +----------------+                    |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  |          |           |                                   |     |      |           |                     |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  | If not in cache,     |                                   |     |      | Forwards  |                     |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  | retrieves DNS servers|                                   |     |      v           v                     |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  | from                 |                                   |     |  +----------------+  +----------------+|</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  |          v           |                                   |     |  | node's resolv.conf|  |K8s API  |    |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  |  +----------------+  |                                   |     |  +----------------+  |(Svcs/Endpoints) |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  |  | nodelocaldns   |  |                                   |     |                     +----------------+ |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  |  +----------------+  |                                   |     |                                        |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  +----------------------+                                   |     +----------------------------------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+-------------------------------------------------------------+</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="记录规则">记录规则<a href="https://itxx00.github.io/notes/blog/2025/08/07/k8s-basic#%E8%AE%B0%E5%BD%95%E8%A7%84%E5%88%99" class="hash-link" aria-label="记录规则的直接链接" title="记录规则的直接链接">​</a></h3>
<p>svc记录规则：</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;svc-name&gt;.&lt;namespace-name&gt;.svc.&lt;cluster-domain&gt;</span><br></span></code></pre></div></div>
<p>statefulset记录规则：</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;pod-name&gt;.&lt;svc-name&gt;.&lt;namespace-name&gt;.svc.&lt;cluster-domain&gt;</span><br></span></code></pre></div></div>
<p>配置示例:</p>
<div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">.</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">53 </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">                            </span><span class="token comment" style="color:#999988;font-style:italic"># 监听地址和端口</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    errors                        </span><span class="token comment" style="color:#999988;font-style:italic"># 启用错误日志</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    health </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">                      </span><span class="token comment" style="color:#999988;font-style:italic"># 健康检查配置,提供Liveness探针地址http://:8080/health</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      lameduck 5s                 </span><span class="token comment" style="color:#999988;font-style:italic"># 在关闭前的等待时间</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ready                         </span><span class="token comment" style="color:#999988;font-style:italic"># 启用就绪检查</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    hosts /etc/add_hosts </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic"># 使用指定的hosts文件进行解析</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">#1.2.3.1   kubenode1        # hosts文件中的解析规则，将kubenode1解析为1.2.3.1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      fallthrough                 </span><span class="token comment" style="color:#999988;font-style:italic"># 如果没有匹配到hosts文件中的解析规则，继续向下解析</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    kubernetes cluster.local in</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">addr.arpa ip6.arpa </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">   </span><span class="token comment" style="color:#999988;font-style:italic"># Kubernetes相关配置</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      pods insecure               </span><span class="token comment" style="color:#999988;font-style:italic"># 允许通过域名解析Pods的IP地址</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      fallthrough in</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">addr.arpa ip6.arpa                </span><span class="token comment" style="color:#999988;font-style:italic"># 如果没有匹配到Kubernetes相关的解析规则，继续向下解析</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    prometheus </span><span class="token punctuation" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">9153</span><span class="token plain">              </span><span class="token comment" style="color:#999988;font-style:italic"># 启用Prometheus指标收集，监听地址和端口</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    bufsize 4096                  </span><span class="token comment" style="color:#999988;font-style:italic">#  limits a requester’s UDP payload size to within a maximum value,must be within 512 - 4096</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    forward . "/etc/resolv.conf"  </span><span class="token comment" style="color:#999988;font-style:italic"># 使用指定的resolv.conf文件进行转发解析</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    cache 30                      </span><span class="token comment" style="color:#999988;font-style:italic"># DNS缓存时间</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    loop                          </span><span class="token comment" style="color:#999988;font-style:italic"># 启用循环查询</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    reload                        </span><span class="token comment" style="color:#999988;font-style:italic"># 监听配置文件的变化并自动重新加载</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    loadbalance                   </span><span class="token comment" style="color:#999988;font-style:italic"># 启用负载均衡</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<p>pod 中的 dns 配置受dnsPolicy策略和 hostNetwork 策略控制，当hostNetwork=true 时，使用宿主机 dns，其中dnsPolicy有以下几种：</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| 策略名称                | 解析行为                                                                 |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|-------------------------|-------------------------------------------------------------------------|</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| Default                 | Pod 使用宿主机的 DNS 配置                                                |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| ClusterFirst            | 默认设置，Pod 使用 coredns 作为 nameserver，其 nameserver 来自 kubelet 的--cluster-dns=10.43.0.10参数 |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| ClusterFirstWithHostNet | 即使是hostNetwork=true，也会使用 coredns                                |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| None                    | 使用 Pod 的 dnsConfig 配置项                                             |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">解析示例:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```text</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">root@backend-service-555d6684b5-9kwc7:~# cat /etc/resolv.conf</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">nameserver 10.43.0.10</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">search k8s.svc.cluster.local svc.cluster.local cluster.local</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">options ndots:5</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">root@backend-service-555d6684b5-9kwc7:~# nslookup clickhouse-service.clickhouse</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Server:         10.43.0.10</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Address:        10.43.0.10#53</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Name:   clickhouse-service.clickhouse.svc.cluster.local</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Address: 192.168.4.91</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Name:   clickhouse-service.clickhouse.svc.cluster.local</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Address: 192.168.4.86</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Name:   clickhouse-service.clickhouse.svc.cluster.local</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Address: 192.168.4.87</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Name:   clickhouse-service.clickhouse.svc.cluster.local</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Address: 192.168.4.90</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Name:   clickhouse-service.clickhouse.svc.cluster.local</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Address: 192.168.4.89</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Name:   clickhouse-service.clickhouse.svc.cluster.local</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Address: 192.168.4.88</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">root@backend-service-555d6684b5-9kwc7:~# nslookup clickhouse-1-1-0.clickhouse-service.clickhouse</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Server:         10.43.0.10</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Address:        10.43.0.10#53</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Name:   clickhouse-1-1-0.clickhouse-service.clickhouse.svc.cluster.local</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Address: 192.168.4.86</span><br></span></code></pre></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="k8s-监控">k8s 监控<a href="https://itxx00.github.io/notes/blog/2025/08/07/k8s-basic#k8s-%E7%9B%91%E6%8E%A7" class="hash-link" aria-label="k8s 监控的直接链接" title="k8s 监控的直接链接">​</a></h2>
<p>metrics-server
用来采集 k8s 各种监控指标，提供给kubectl top、hpa（Horizontal Pod Autoscaler）、vpa（Vertical Pod Autoscaler）、k8s-dashboard 等使用。
数据链路：</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">+-----------+      +----------+      +---------------+      +---------+      +--------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  kubectl  |      | apiserver|      | metrics-server|      | kubelet |      | cgroup |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+-----------+      +----------+      +---------------+      +---------+      +--------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      \                 ^                   ^                   ^                ^</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       \                |                   |                   |                |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+-----------+           |                   |                   |                |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| dashboard |-----------+                   |                   |                |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+-----------+                               |                   |                |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      \                                     |                   |                |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       \                                    |                   |                |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+-----------+                               |                   |                |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| scheduler |-------------------------------+                   |                |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+-----------+                                                   |                |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                                                |                |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                                                |                |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                                                +----------------+</span><br></span></code></pre></div></div>
<p>metrics-sever 通过采集 kubelet 提供的 metrics 接口（<a href="https://nodeip:10250/" target="_blank" rel="noopener noreferrer">https://nodeip:10250</a> 的 /metrics   /metrics/cadvisor,  /metrics/probes, /metrics/resource）的数据，采集指标示例:</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">[k8s@k8s-192-168-4-86 ~]$ curl -s -k -H "Authorization: Bearer $(kubectl -n kube-system get secrets namespace-controller-token-qwvll -ojson|jq '.data.token' -r|base64 -d)" https://192.168.4.86:10250/metrics/resource|head -10</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">## HELP container_cpu_usage_seconds_total [ALPHA] Cumulative cpu time consumed by the container in core-seconds</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">## TYPE container_cpu_usage_seconds_total counter</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">container_cpu_usage_seconds_total{container="apiserver",namespace="hive2ch",pod="hive2ch-apiserver-6fdf5df7f5-lgvgp"} 2270.429353976 1722443959650</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">container_cpu_usage_seconds_total{container="backend",namespace="sub",pod="subscription-backend-7cd788b876-6z74p"} 7573.822327467 1722443959713</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">container_cpu_usage_seconds_total{container="calico-node",namespace="kube-system",pod="canal-xrmh4"} 108549.571417276 1722443963395</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">container_cpu_usage_seconds_total{container="clickd",namespace="clickhouse",pod="clickd-deployment-549944fcf9-2fzzf"} 65865.995640873 1722443965340</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">container_cpu_usage_seconds_total{container="clickhouse-server",namespace="clickhouse",pod="clickhouse-1-1-0"} 473112.908558262 1722443956984</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">container_cpu_usage_seconds_total{container="consul-client",namespace="consul",pod="consul-client-3-0"} 103994.031234639 1722443955027</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">container_cpu_usage_seconds_total{container="controller",namespace="ingress-nginx",pod="nginx-ingress-controller-z46n4"} 103172.807361637 1722443959662</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">container_cpu_usage_seconds_total{container="coredns",namespace="kube-system",pod="coredns-68c65cb45-9hxdn"} 43348.132995208 1722443948530</span><br></span></code></pre></div></div>
<p>再通过 apiserver 的 Metrics API 对内提供服务。其设计的主要目的是用于 autoscaling，不建议用作指标监控。</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="prometheus">prometheus<a href="https://itxx00.github.io/notes/blog/2025/08/07/k8s-basic#prometheus" class="hash-link" aria-label="prometheus的直接链接" title="prometheus的直接链接">​</a></h3>
<p>prometheus 是第二个 CNCF 托管的项目（第一个是 k8s），为 k8s 监控量身打造，提供了包含指标采集、存储、查询以及告警等一套完整的能力。</p>
<p>整体架构:</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">+------------------+          +---------------------------+          +--------------+          +----------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| Short-lived jobs |          |      Service discovery    |          | Alertmanager |          |    pagerduty   |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+------------------+          | +-----------+ +---------+ |          +--------------+          +----------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        |                     | | kubernetes | | file_sd| |                | notify                 | Email   |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        | push metrics at exit| +-----------+ +---------+ |                |------------------------| etc     |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        v                    +----------------------------+                |                         +--------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+--------------+                      | discover targets                push alerts</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| Pushgateway  |----------------------|------------------------------------&gt;|</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+--------------+                      v                                     |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        |                     +-------------------------------+             |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        | pull metrics        |      Prometheus server        |             |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        v                     | +-----------+ +-----+ +-----+ |             |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+----------------+            | | Retrieval | | TSDB| | HTTP| |             |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| Jobs/ exporters|            | +-----------+ +-----+ +-----+ |             |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+----------------+            |                               |             |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                              +-------------------------------+             |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                       |                                    |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                       v                                    v</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                    +------------+                     +------------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                    | Node       |                     | Prometheus UI    |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                    | +--------+ |                     +------------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                    | |HDD/SSD | |                          |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                    | +-------+| |                          |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                    +------------+                     +------------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                                                       |     Grafana      |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                                                       +------------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                                                            |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                                                       +------------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                                                       |    API clients   |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                                                       +------------------+</span><br></span></code></pre></div></div>
<p>prometheus server自带时序数据库， 通过内置的采集器从 k8s 以及周边组件暴露的 metrics 接口拉取指标数据，同时也诞生了针对各种组件的exporter ，这些 exporter 通过各种协议采集对应组件的指标，再通过 metrics 接口提供给 prometheus 采集。prometheus 的另一个重要能力是创建了 promQL 查询语法，类似 influxQL，可以通过各种内置函数对指标进行计算、聚合，同时还能通过 promql 配置告警规则。
prometheus 的 tsdb 不依赖分布式存储，好处是简单好维护单节点可运行，不好的是本地存储挂了数据就丢了，为此 prometheus 提供了 remote_write/remote_read 的标准接口，可以把数据对接到外部分布式存储中。
promql 查询示例：</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">## 计算增长率</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">rate(demo_api_request_duration_seconds_count[5m])</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">## 根据 label 筛选</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">node_cpu_seconds_total{cpu!="0",mode=~"user|system"}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">## 根据数值筛选</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">node_filesystem_avail_bytes &gt; 10*1024*1024</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">## 90 分位</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">histogram_quantile(0.9, rate(demo_api_request_duration_seconds_bucket[5m]))</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">## 平均值</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">avg_over_time(go_goroutines[5m])</span><br></span></code></pre></div></div>
<p>更多详细用法可参考官方手册：<a href="https://prometheus.io/docs/prometheus/latest/querying/basics/" target="_blank" rel="noopener noreferrer">https://prometheus.io/docs/prometheus/latest/querying/basics/</a>
自动写 ql 的 gpt 工具：<a href="https://www.yeschat.ai/gpts-9t563RLGy4U-PromQL-Advisor" target="_blank" rel="noopener noreferrer">https://www.yeschat.ai/gpts-9t563RLGy4U-PromQL-Advisor</a></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="grafana">grafana<a href="https://itxx00.github.io/notes/blog/2025/08/07/k8s-basic#grafana" class="hash-link" aria-label="grafana的直接链接" title="grafana的直接链接">​</a></h2>
<p>grafana 是一个精于展示时序数据的可视化工具，具有灵活的图表展示，丰富的数据源支持等特性。早期的 grafana 是一个 kibana 的分支，其元数据存储依赖 es，后来重构成一个纯前端的项目，图标展示能力更强性能更好，再后来有了 golang 写的后端，可以把元数据存到 sqlite、mysql、pgsql 等db 中，同时支持插件化，例如新增一个数据源类型只需要写一个插件。同时构建了在线仪表盘分享社区，可以方便的导入别人设计好的仪表盘。随着云原生及 k8s 的发展，grafana 顺势成为 k8s 监控可视化的最佳搭档。不仅如此，grafana 背后公司继续朝可观测性领域发力，在 metrics、logs、trace 方向都有对应的产品推出，例如我们用到的 loki 也是出自 GrafanaLabs 。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="loki">Loki<a href="https://itxx00.github.io/notes/blog/2025/08/07/k8s-basic#loki" class="hash-link" aria-label="Loki的直接链接" title="Loki的直接链接">​</a></h2>
<p>Loki 是一个开源的日志收集系统，其功能是收集、存储和查询日志。 Loki 压缩日志并将日志存储在块中，并将它们存储在文件系统或 AWS S3 等后端存储中。
块（chunk）是一个压缩文件，其中包含基于日志卷的日志条目，因此当块大小达到其大小限制时，它会将日志存储在另一个块中。每当存储一个块时，它都会为每个块创建一个索引（index）。索引不包含日志的内容，它只包含时间戳、块的标签和块的位置。
loki 特性： 横向扩容、多租户、日志采集展示、日志告警</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">+-------------------------+-------------------------------+-------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|      Timestamp          |    Prometheus-style Labels    |   Content   |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| with nanosecond precision|        key-value pairs        |   logline   |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|        indexed          |            indexed            |  unindexed  |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+-------------------------+-------------------------------+-------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| 2019-12-11T10:01:02.123456789Z | {app="nginx", cluster="us-west1"} | GET /about |</span><br></span></code></pre></div></div>
<p>loki 数据流：</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">+-----------------+       +-----------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|    NODE 1       |       |    NODE 2       |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| +-------------+ |       | +-------------+ |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| | Application | |       | | Application | |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| +-------------+ |       | +-------------+ |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|      |          |       |      |          |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| Write Logs      |       | Write Logs      |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|      v          |       |      v          |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| +-------------+ |       | +-------------+ |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| |   Promtail  | |       | |   Promtail  | |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| +-------------+ |       | +-------------+ |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+--------|--------+       +--------|--------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">         |                         |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">         +-----------+-------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                     |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        +-------------------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        |          Loki           |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        | +---------+  +---------+|</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        | |Distributor|          ||</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        | +---------+  +---------+|</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        |      |          |       |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        |   +---------+  +---------+  +--------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        |   | Ingester|  | Querier |  |Query Frontend|</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        |   +---------+  +---------+  +--------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        |      |          ^              ^</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        |      v          |              |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        |   +---------+   |              |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        |   |  Ruler  |&lt; -+              |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        |   +---------+                  |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        |                                |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        | +------------------+ +------------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        | |  Index           | |  Chunks          |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        | | /var/lib/loki/   | | /var/lib/loki/   |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        | | /index           | | /chunks          |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        | +------------------+ +------------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        +-------------------------------------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            |                         |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            v                         v</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+-------------------+         +------------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| Email Notification|         | Visualize Logs   |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+-------------------+         +------------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                      |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                 +--------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                 | Grafana|</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                 +--------+</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="模块介绍">模块介绍<a href="https://itxx00.github.io/notes/blog/2025/08/07/k8s-basic#%E6%A8%A1%E5%9D%97%E4%BB%8B%E7%BB%8D" class="hash-link" aria-label="模块介绍的直接链接" title="模块介绍的直接链接">​</a></h3>
<p>promtail：负责采集pod日志的 agent，以 daemonset 部署在每个节点，k8s 中宿主机上也部署有独立的 promtail 组件，用来采集宿主机部署的组件日志；
distributor：以deploy方式部署，是一个无状态组件，负责处理、过滤由 promtail 发送过来的日志流数据，并分发到 ingester；
ingester：用statefulset部署，接收到来自distributor 的日志后负责日志数据的存储和索引，也能定期将日志发往对象存储如 s3 兼容的持久性存储系统；
querier：用statefulset部署，负责执行 logQL 查询，从 ingester 中查询日志数据，对查询结果做聚合、过滤等；
query-frontend：以deploy方式部署，无状态服务，负责接收来自客户端（命令行 cli、grafana 等）的查询请求，将大查询拆成多个小查询；</p>
<p>promtail.yaml配置示例：</p>
<div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">job_name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> mysql</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">server</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">slow</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">query</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">job</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">static_configs</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">targets</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> localhost</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token key atrule" style="color:#00a4db">labels</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token key atrule" style="color:#00a4db">__path__</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> /data00/mysql/log3406/slow_query.log</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token key atrule" style="color:#00a4db">component</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"MySQL"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token key atrule" style="color:#00a4db">service</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"MysqlServer"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token key atrule" style="color:#00a4db">type</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"SlowQuery"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token key atrule" style="color:#00a4db">hostName</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> k8s</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">192</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">168</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">4</span><span class="token punctuation" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">86</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token key atrule" style="color:#00a4db">hostIp</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> 192.168.4.86</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token key atrule" style="color:#00a4db">logLevel</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> INFO</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">pipeline_stages</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">match</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token key atrule" style="color:#00a4db">selector</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'{service="MysqlServer"}'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token key atrule" style="color:#00a4db">stages</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">multiline</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token key atrule" style="color:#00a4db">firstline</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'^# Time:'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token key atrule" style="color:#00a4db">max_lines</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">128</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="logql-查询">logQL 查询<a href="https://itxx00.github.io/notes/blog/2025/08/07/k8s-basic#logql-%E6%9F%A5%E8%AF%A2" class="hash-link" aria-label="logQL 查询的直接链接" title="logQL 查询的直接链接">​</a></h3>
<p>查询分两类，metrics 查询和日志查询
日志查询：</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">logcli labels  #查所有 label</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">logcli labels service  # 查指定 label</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">## 查指定label 的日志</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">logcli query '{service="k8s/backend-service"}'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">## limit控制查询行数</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">logcli query '{service="k8s/backend-service"}' -q -o raw --limit 10</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">## 支持正则匹配关键字</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">logcli query '{service="k8s/backend-service"} |~ ".*WARNING.*|.*ERROR.*"' -q -o raw</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">## host label 筛选节点</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">logcli query '{service="k8s/backend-service",host="172.16.0.126"}' -q -o raw</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">## 指定查询时间范围</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">logcli query '{service="k8s/backend-service"}' -q  --from="2022-12-24T00:00:00Z" --to="2022-12-24T02:00:00Z"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">## -f 类似 tail -f 实时滚动最新日志</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">logcli query '{service="k8s/backend-service"} ' -q -o raw -f</span><br></span></code></pre></div></div>
<p>日志 Metrics 查询：
loki 支持各种聚合函数和运算对日志进行聚合，从日志中得到指标数据，基于日志的告警等，例如：</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">## 10分钟内ERROR日志过多</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">count_over_time({host=~"xxxx"}|~"error"[10m]) &gt; 100</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">## 日志错误率超过 1%</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">sum(rate({service="xxx"} |= "error" [1m])) by (job) / sum(rate({service="xxx"}[1m])) by (service) &gt; 0.01</span><br></span></code></pre></div></div>
<p>metrics 查询函数可参考： <a href="https://grafana.com/docs/loki/latest/query/metric_queries/" target="_blank" rel="noopener noreferrer">https://grafana.com/docs/loki/latest/query/metric_queries/</a></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="k8s常用命令">k8s常用命令<a href="https://itxx00.github.io/notes/blog/2025/08/07/k8s-basic#k8s%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4" class="hash-link" aria-label="k8s常用命令的直接链接" title="k8s常用命令的直接链接">​</a></h2>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">## json格式输出，jq 命令解析字段</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">kubectl get svc prom-prometheus-server -n monitoring -o json | jq -r '.spec.clusterIP') </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">## 通过-o 指定输出字段</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">kubectl get nodes --no-headers -o custom-columns=NAME:.metadata.name</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">## 按节点统计运行中 pod 个数</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">kubectl get pod -A -o wide --no-headers |awk '{print $4,$8}' |grep -v Completed |awk '{print $2}' |sort |uniq -c</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">## 直接请求 apisever 接口</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">kubectl get --raw /api/v1/nodes/"$nodename"/proxy/stats/summary </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">## 根据 pod label 查询日志</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">kubectl -n $ns logs -l $labels</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">## 查找所有包含某个关键字的 deploy</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">kubectl get deploy -A --no-headers |awk '{print $1,$2}'|while read -r ns dp;do if kubectl -n $ns describe deploy $dp|grep -Eq 'hadoop-conf|hive-conf|spark-conf'; then echo $ns $dp;fi;done</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">## 查看一个 pod 最后一次挂掉的日志</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">kubectl -n monitoring logs k8s-fronted-monitor-f76fc4c88-n29xs -p</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">## 容器内无相关命令时，从容器网络内往外发送网络请求</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">docker inspect 51472f1ec767 | grep Pid  # 找到 pid</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">sudo nsenter -t 208696 -n curl xxx.com  # 使用 nsenter 命令进入容器网络并执行本地命令</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">## 查看 events 事件消息，例如 pod 一直 pending，pod 拉起失败等场景</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">kubectl -n k8s get events</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">## 查看 kubelet 日志</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">docker logs kubelet -f --tai 100</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">## 使用指定镜像运行临时容器，可进入容器查看文件内容等</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">kubectl run -it --rm --attach --image=registry.xxx.com:5000/xxx:vxxx  debugpod -- bash</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">## 查找pid所属的 container</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/tmp/hlkit1000/bin/pid-container.sh 3626508</span><br></span></code></pre></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="拓展阅读">拓展阅读<a href="https://itxx00.github.io/notes/blog/2025/08/07/k8s-basic#%E6%8B%93%E5%B1%95%E9%98%85%E8%AF%BB" class="hash-link" aria-label="拓展阅读的直接链接" title="拓展阅读的直接链接">​</a></h2>
<ol>
<li><a href="https://kubernetes.io/zh-cn/docs/reference/kubectl/" target="_blank" rel="noopener noreferrer">https://kubernetes.io/zh-cn/docs/reference/kubectl/</a></li>
<li><a href="https://grafana.com/docs/loki/latest/query/log_queries/" target="_blank" rel="noopener noreferrer">https://grafana.com/docs/loki/latest/query/log_queries/</a></li>
<li><a href="https://docs.nginx.com/nginx-ingress-controller/overview/design/" target="_blank" rel="noopener noreferrer">https://docs.nginx.com/nginx-ingress-controller/overview/design/</a></li>
</ol>]]></content>
        <author>
            <name>老司机</name>
            <uri>https://github.com/itxx00</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[如何通过loop模拟一个lvm逻辑卷]]></title>
        <id>https://itxx00.github.io/notes/blog/2023/12/25/create-loop-lvm</id>
        <link href="https://itxx00.github.io/notes/blog/2023/12/25/create-loop-lvm"/>
        <updated>2023-12-25T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[年纪大了记性不好]]></summary>
        <content type="html"><![CDATA[<p>某些时候我们需要一个lvm逻辑卷，但是又没有多余的磁盘设备可用，这时可以通过模拟的方式创建一个设备出来，步骤如下：</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># 首先创建一个虚拟block文件</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">dd if=/dev/zero of=pv1 bs=1M count=5000</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 然后通过losetup将其挂载到loop0设备上</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">sudo losetup /dev/loop0 pv1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 查看状态</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">sudo losetup</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 这时可以对loop0设备进行操作，当做一个block设备使用</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">sudo pvcreate /dev/loop0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">sudo vgcreate vg0 /dev/loop0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">sudo lvcreate -n lv0 -l 100%FREE vg0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 创建好lv之后就可以继续格式化文件系统</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">sudo mkfs.ext4 /dev/vg0/lv0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">sudo mkdir /data01</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">sudo mount /dev/vg0/lv0 /data01</span><br></span></code></pre></div></div>
<p>这样我们就完成了通过dd出一个空文件，然后通过loop设备模拟了一个lvm逻辑卷出来。
使用完之后清理：</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">sudo umount /data01</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">sudo lvremove /dev/vg0/lv0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">sudo vgremove vg0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">sudo pvremove /dev/loop0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">sudo losetup -d /dev/loop0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">rm pv1</span><br></span></code></pre></div></div>]]></content>
        <author>
            <name>老司机</name>
            <uri>https://github.com/itxx00</uri>
        </author>
        <category label="bash" term="bash"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[普通用户执行systemctl启停服务禁用密码认证]]></title>
        <id>https://itxx00.github.io/notes/blog/2023/02/02/non-root-systemd</id>
        <link href="https://itxx00.github.io/notes/blog/2023/02/02/non-root-systemd"/>
        <updated>2023-02-02T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[年纪大了记性不好]]></summary>
        <content type="html"><![CDATA[<p>在CentOS系统中默认情况下，使用普通用户管理系统服务启停会要求认证，输出类似如下：</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">systemctl restart xxx</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">==== AUTHENTICATING FOR org.freedesktop.systemd1.manage-units ===</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Authentication is required to manage system services or units.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Authenticating as: root</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Password:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre></div></div>
<p>这里的认证是systemd引入polkit认证，可以通过polkit配置文件来改变默认行为，例如和配置某个普通用户免密执行sudo一样，这里也可以配置polkit认证免密：</p>
<p>配置文件路径:/etc/polkit-1/localauthority/50-local.d/xxx.pkla</p>
<p>例如 vi /etc/polkit-1/localauthority/50-local.d/xxx.pkla</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[disable auth for admin]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Identity=unix-user:yourusername</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Action=*</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ResultActive=yes</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ResultAny=yes</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ResultInactive=yes</span><br></span></code></pre></div></div>
<p>保存配置立即生效，再执行systemctl restart就不会提示认证了。</p>]]></content>
        <author>
            <name>老司机</name>
            <uri>https://github.com/itxx00</uri>
        </author>
        <category label="bash" term="bash"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[influxQL常用语句整理]]></title>
        <id>https://itxx00.github.io/notes/blog/2022/12/28/influxdb-ql-use-case</id>
        <link href="https://itxx00.github.io/notes/blog/2022/12/28/influxdb-ql-use-case"/>
        <updated>2022-12-28T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[年纪大了记性不好]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="db">db<a href="https://itxx00.github.io/notes/blog/2022/12/28/influxdb-ql-use-case#db" class="hash-link" aria-label="db的直接链接" title="db的直接链接">​</a></h2>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">show databases</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">use db1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">show retention policies</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">create database db2 with duration 30d replication 2</span><br></span></code></pre></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="retention">retention<a href="https://itxx00.github.io/notes/blog/2022/12/28/influxdb-ql-use-case#retention" class="hash-link" aria-label="retention的直接链接" title="retention的直接链接">​</a></h2>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">alter retention policy default on db1 duration 168h default</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">show retention policies</span><br></span></code></pre></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="measurements">measurements<a href="https://itxx00.github.io/notes/blog/2022/12/28/influxdb-ql-use-case#measurements" class="hash-link" aria-label="measurements的直接链接" title="measurements的直接链接">​</a></h2>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">use db1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">show measurements</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">show measurements with measurement =~ /cpu/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="tag">tag<a href="https://itxx00.github.io/notes/blog/2022/12/28/influxdb-ql-use-case#tag" class="hash-link" aria-label="tag的直接链接" title="tag的直接链接">​</a></h2>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">show tag keys from cpu</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">show tag values from cpu with key=cputype</span><br></span></code></pre></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="field">field<a href="https://itxx00.github.io/notes/blog/2022/12/28/influxdb-ql-use-case#field" class="hash-link" aria-label="field的直接链接" title="field的直接链接">​</a></h2>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">show field keys from cpu</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre></div></div>]]></content>
        <author>
            <name>老司机</name>
            <uri>https://github.com/itxx00</uri>
        </author>
        <category label="bash" term="bash"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[mac上使用docker交叉静态编译jq和fio]]></title>
        <id>https://itxx00.github.io/notes/blog/2022/11/08/static-build-jq-fio</id>
        <link href="https://itxx00.github.io/notes/blog/2022/11/08/static-build-jq-fio"/>
        <updated>2022-11-08T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[描述]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="思路">思路<a href="https://itxx00.github.io/notes/blog/2022/11/08/static-build-jq-fio#%E6%80%9D%E8%B7%AF" class="hash-link" aria-label="思路的直接链接" title="思路的直接链接">​</a></h2>
<p>为了得到静态编译的jq和fio程序二进制,同时又需要x86_64和aarch64的版本,可以利用docker的buildx实现交叉编译</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="步骤">步骤<a href="https://itxx00.github.io/notes/blog/2022/11/08/static-build-jq-fio#%E6%AD%A5%E9%AA%A4" class="hash-link" aria-label="步骤的直接链接" title="步骤的直接链接">​</a></h2>
<p>编译fio</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">mkdir fio &amp;&amp; cd fio</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">vi Dockerfile</span><br></span></code></pre></div></div>
<p>Dockerfile 如下</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">FROM ubuntu as build</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">WORKDIR /opt</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ARG VER=fio-3.33</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">RUN if [  -e /etc/apt/sources.list ];then sed -ri 's/[a-zA-Z0-9.]+(debian.org|ubuntu.com)/mirrors.volces.com/g' /etc/apt/sources.list; fi &amp;&amp; \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    export DEBIAN_FRONTEND=noninteractive &amp;&amp; \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    apt-get update &amp;&amp; \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    apt-get install -y git gcc make cmake libaio1 libaio-dev zlib1g zlib1g-dev</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">RUN git clone https://github.com/axboe/fio.git &amp;&amp; \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    cd fio  &amp;&amp; \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    git checkout ${VER}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">RUN cd fio  &amp;&amp; \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ./configure --build-static</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">RUN cd fio &amp;&amp; make &amp;&amp; make install  &amp;&amp; \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    strip `which fio` &amp;&amp; cp `which fio` /fio-$(dpkg --print-architecture)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">FROM scratch AS bin</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">COPY --from=build /fio-* /</span><br></span></code></pre></div></div>
<p>执行编译</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">docker buildx build . --platform linux/amd64 --target bin --output .</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">docker buildx build . --platform linux/arm64 --target bin --output .</span><br></span></code></pre></div></div>
<p>编译成功会在当前目录得到可执行程序fio-amd64和fio-arm64两个文件.</p>
<p>jq编译步骤类似,dockerfile如下:</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">FROM ubuntu as build</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">WORKDIR /opt</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ARG VER=jq-1.6</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">RUN if [  -e /etc/apt/sources.list ];then sed -ri 's/[a-zA-Z0-9.]+(debian.org|ubuntu.com)/mirrors.volces.com/g' /etc/apt/sources.list; fi &amp;&amp; \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    export DEBIAN_FRONTEND=noninteractive &amp;&amp; \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    apt-get update &amp;&amp; \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    apt-get install -y build-essential libtool git gcc make cmake autotools-dev autoconf</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">RUN git clone https://github.com/stedolan/jq.git &amp;&amp; \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    cd jq  &amp;&amp; \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    git checkout ${VER} &amp;&amp; git submodule update --init</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">RUN cd jq  &amp;&amp; \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    autoreconf -fi &amp;&amp; \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ./configure --disable-maintainer-mode --disable-valgrind --with-oniguruma=builtin --enable-all-static --prefix=/usr/local</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">RUN cd jq &amp;&amp; LDFLAGS=-all-static make -j4 &amp;&amp; make install  &amp;&amp; \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    strip /usr/local/bin/jq &amp;&amp; cp /usr/local/bin/jq /jq-$(dpkg --print-architecture)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">FROM scratch AS bin</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">COPY --from=build /jq-* /</span><br></span></code></pre></div></div>]]></content>
        <author>
            <name>老司机</name>
            <uri>https://github.com/itxx00</uri>
        </author>
        <category label="bash" term="bash"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[pre-commit basic usage]]></title>
        <id>https://itxx00.github.io/notes/blog/2022/04/20/pre-commit-basic</id>
        <link href="https://itxx00.github.io/notes/blog/2022/04/20/pre-commit-basic"/>
        <updated>2022-04-20T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[描述]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="install">install<a href="https://itxx00.github.io/notes/blog/2022/04/20/pre-commit-basic#install" class="hash-link" aria-label="install的直接链接" title="install的直接链接">​</a></h2>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">pip install pre-commit</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="init">init<a href="https://itxx00.github.io/notes/blog/2022/04/20/pre-commit-basic#init" class="hash-link" aria-label="init的直接链接" title="init的直接链接">​</a></h2>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">git clone https://xxx/xxx.git</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">cd xxx</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">pre-commit install</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">pre-commit sample-config &gt;.pre-commit-config.yaml</span><br></span></code></pre></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="test">test<a href="https://itxx00.github.io/notes/blog/2022/04/20/pre-commit-basic#test" class="hash-link" aria-label="test的直接链接" title="test的直接链接">​</a></h2>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">pre-commit run --all-files</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">pre-commit run --files xxx.py</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="sample-conf">sample conf<a href="https://itxx00.github.io/notes/blog/2022/04/20/pre-commit-basic#sample-conf" class="hash-link" aria-label="sample conf的直接链接" title="sample conf的直接链接">​</a></h2>
<div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># See https://pre-commit.com for more information</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># See https://pre-commit.com/hooks.html for more hooks</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">repos</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">repo</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> https</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">//github.com/pre</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">commit/pre</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">commit</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">hooks</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">rev</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> v4.5.0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">hooks</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">id</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> trailing</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">whitespace</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">id</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> end</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">of</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">file</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">fixer</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">id</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> check</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">yaml</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">id</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> check</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">added</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">large</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">files</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">repo</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> https</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">//github.com/talos</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">systems/conform</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">rev</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> v0.1.0</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">alpha.27</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">hooks</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">id</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> conform</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token key atrule" style="color:#00a4db">stages</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> commit</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">msg</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">repo</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> https</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">//github.com/5xops/mirrors</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">shellcheck</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">rev</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> v1.0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">hooks</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">id</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> shellcheck</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token key atrule" style="color:#00a4db">args</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">-</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">exclude=SC2148</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">SC2155</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">SC2009</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">SC2029</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">SC1091</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">repo</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> https</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">//github.com/psf/black</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">rev</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> 23.11.0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">hooks</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">id</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> black</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token key atrule" style="color:#00a4db">args</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">-</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">line</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">length=1000</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">#  - repo: https://github.com/pre-commit/mirrors-mypy</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">#    rev: v0.770</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">#    hooks:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">#      - id: mypy</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">#        language: python_venv</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">#        exclude: ^(docs/|example-plugin/|tests/fixtures)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">repo</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> https</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">//github.com/PyCQA/flake8</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">rev</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> 6.1.0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">hooks</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">id</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> flake8</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token key atrule" style="color:#00a4db">exclude</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> $(.tox/</span><span class="token punctuation" style="color:#393A34">|</span><span class="token plain">.git/</span><span class="token punctuation" style="color:#393A34">|</span><span class="token plain">__pycache__/</span><span class="token punctuation" style="color:#393A34">|</span><span class="token plain">build/</span><span class="token punctuation" style="color:#393A34">|</span><span class="token plain">dist/</span><span class="token punctuation" style="color:#393A34">|</span><span class="token plain">.cache</span><span class="token punctuation" style="color:#393A34">|</span><span class="token plain">.eggs/)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token key atrule" style="color:#00a4db">args</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">-</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">ignore=E501</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">W503</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">E722</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">W605</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">E203</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">repo</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> https</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">//github.com/PyCQA/pylint</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">rev</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> v3.0.1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">hooks</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">id</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> pylint</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token key atrule" style="color:#00a4db">language</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> python</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token key atrule" style="color:#00a4db">args</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">-</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">disable=R0801</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">C0114</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">C0115</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">C0116</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">C0209</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">C0415</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">E0401</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">W1401</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">R0912</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">R0913</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">R0914</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">R0915</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">W0212</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">C0103</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">-</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">max</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">line</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">length=120</span><br></span></code></pre></div></div>]]></content>
        <author>
            <name>老司机</name>
            <uri>https://github.com/itxx00</uri>
        </author>
        <category label="bash" term="bash"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用cobbler批量安装centos系统]]></title>
        <id>https://itxx00.github.io/notes/blog/2022/04/20/pxe-cobbler-install</id>
        <link href="https://itxx00.github.io/notes/blog/2022/04/20/pxe-cobbler-install"/>
        <updated>2022-04-20T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[描述]]></summary>
        <content type="html"><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="基本介绍">基本介绍：<a href="https://itxx00.github.io/notes/blog/2022/04/20/pxe-cobbler-install#%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D" class="hash-link" aria-label="基本介绍：的直接链接" title="基本介绍：的直接链接">​</a></h3>
<p>PXE（preboot execute environment）由Intel发明的通过网络快速引导操作系统的技术，其原理是在机器引导时通过server端为网卡DHCP分配IP信息，并通知client端next_server中的tftp地址，client端继续通过tftp下载系统引导镜像，加载并完成启动。这里我们还会用到另外一项技术叫kickstart，由红帽开发，早先用于其系统安装工具中以完成自动化安装，已被众多发行版支持。系统引导时可以通过kickstart配置文件中指定的安装流程自动完成后续步骤，减少人工干预。而通常手工配置dhcp、tftp、kickstart等往往比较繁琐，这里我们会利用红帽开发的另外一款工具cobbler，通过cobbler来完成整个dhcp、tftp、kickstart等组成的server端环境的快速搭建和管理，以此提高效率。</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="cobbler安装配置">cobbler安装配置：<a href="https://itxx00.github.io/notes/blog/2022/04/20/pxe-cobbler-install#cobbler%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE" class="hash-link" aria-label="cobbler安装配置：的直接链接" title="cobbler安装配置：的直接链接">​</a></h3>
<p>我们使用CentOS7作为server端系统，为了节约现场部署时间，我们将提前准备好环境并直接带到现场使用，以下所有操作将在一台ThinkPad上完成。</p>
<p>因私有化环境无需连外网，因此在实际使用时我们为了简化部署流程，可以将selinux和防火墙禁用掉，如需要启用防火墙的话则需要放开http/dhcp/tftp等服务的对应端口：</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># disable selinux</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">sed -i 's/^SELINUX=.*$/SELINUX=disabled/' /etc/selinux/config</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># disable iptables</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">systemctl disable firewalld</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">systemctl stop firewalld</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">reboot</span><br></span></code></pre></div></div>
<p>&nbsp;安装cobbler及相关的依赖包：cobbler提供了命令行管理工具和一个web管理工具，分别由cobbler和cobbler-web两个包提供</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">yum install epel-release</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">yum install cobbler cobbler-web httpd dhcp tftp xinetd rsync bind</span><br></span></code></pre></div></div>
<p>配置cobbler：cobbler配置文件放置在/etc/cobbler目录，在启动之前需要server端IP，dhcp等相关信息，首先修改 /etc/cobbler/settings主配置文件，需要修改的参数有以下：</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># 通过以下命令生成系统安装后的默认root密码</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">openssl passwd -1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 并将生成的密码修改到配置中</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">default_password_crypted: “$1$RUNYOYnz$QgzdhCD2T7qXWI1IPpAih0”</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># server端ip，对外提供dhcp和http服务，必须为一个固定内网ip地址</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">server: 192.168.1.1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># next_server为tftp服务所在ip，通常是需要和server保持一致</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">next_server: 192.168.1.1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 打开cobbler对相关服务的自动管理功能，如配置变更和启停等</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">manage_dhcp: 1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">manage_tftpd：1</span><br></span></code></pre></div></div>
<p>&nbsp;修改依赖组件的配置：</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">sed -i '/disable/c\\tdisable\t\t\t= no' /etc/xinetd.d/tftp</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">service xinetd restart</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">修改dhcp网段：vi /etc/cobbler/dhcp.template</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">subnet 192.168.1.0 netmask 255.255.255.0 {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     option routers             192.168.1.1;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     option domain-name-servers 192.168.1.1;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&nbsp; &nbsp; &nbsp;range dynamic-bootp &nbsp; &nbsp; &nbsp; &nbsp;192.168.1.100 192.168.1.200;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     option subnet-mask         255.255.255.0;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     filename                   "/pxelinux.0";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     default-lease-time         21600;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     max-lease-time             43200;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     next-server                $next_server;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre></div></div>
<p>启动服务：</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">systemctl start httpd</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">systemctl start cobblerd</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">systemctl enable httpd</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">systemctl enable cobblerd</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&nbsp;服务检查：cobbler提供了check命令可用于检查各项配置是否满足需要</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">cobbler check</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 通常第一次会提示下载loader</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">cobbler get-loaders</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 如中途修改cobbler配置后需重启cobbler服务</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">systemctl restart cobblerd</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 如变更了dhcp、tftp等相关信息需重新同步配置</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">cobbler sync</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 顺便配置好web管理页面的访问密码</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">htdigest /etc/cobbler/users.digest "Cobbler" cobbler</span><br></span></code></pre></div></div>
<p>&nbsp;可以反复通过check命令来检查环境是否部署OK，并根据实际需求调整各项配置文件，直至check结果复合要求即可。至此cobbler的安装及配置完成。web端工具访问地址：<a href="https://192.168.1.1/cobbler_web" target="_blank" rel="noopener noreferrer">https://192.168.1.1/cobbler_web</a></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="系统镜像准备">系统镜像准备：<a href="https://itxx00.github.io/notes/blog/2022/04/20/pxe-cobbler-install#%E7%B3%BB%E7%BB%9F%E9%95%9C%E5%83%8F%E5%87%86%E5%A4%87" class="hash-link" aria-label="系统镜像准备：的直接链接" title="系统镜像准备：的直接链接">​</a></h3>
<p>接下来我们需要将系统镜像导入cobbler中，并自定义安装引导的kickstart配置。我们要部署到节点上的系统是CentOS7。需要注意的是如果需要通过kickstart定制一些基础软件包的安装，那么需要使用软件包更全的DVD iso，因minimal iso中提供的软件包有限。</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># 将iso挂载到本地目录</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mount -o auto CentOS-7-x86_64-DVD-1611.iso /mnt/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 导入到cobbler中</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">cobbler import --name=centos7 --arch=x86_64 --path=/mnt</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 查看导入的系统及profile</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">cobbler distro list</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">cobbler distro report --name=centos7-x86_64</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">cobbler profile list</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 卸载iso mount point</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">umount /mnt/</span><br></span></code></pre></div></div>
<p>&nbsp;可以看到上面的步骤中我们将CentOS7镜像导入到cobbler中，有几个核心概念需要理解：</p>
<p>distro - 及系统发行版本，不同的镜像导入后对应不同的distro，如centos7-x86_64，不同的distro对应不同的引导镜像；</p>
<p>profile - distro的配置文件，一个distro可以有多个profile，默认导入时会自动生成一个profile，不同的profile可以定义不同的kernel选项，使用不同的kickstart配置；</p>
<p>system - 各个机器所使用的profile实例，与机器MAC地址绑定，可以细化到机器级别的自定义安装，如果所有机器安装都是统一的则无需使用system配置。</p>
<p>&nbsp;接下来需要理解的是cobbler中对kickstart文件的管理方式，ks文件是我们需要重点关注的中间产物，决定了系统自动化部署的执行流程和最终效果。ks文件与profile绑定，默认生成的profile会指向一个默认的ks文件，通常我们需要对其进行自定义来满足不同的部署要求。当系统通过PXE引导至profile选择菜单后，一旦选定了需要部署的系统，接下来就会按照该profile所对应的ks文件来执行一系列的安装操作。</p>
<p>在cobbler中ks文件的实例是通过cgi动态生成的，而生成ks实例所依赖的则是ks templates和snippets， cobbler通过template来将ks文件主体流程部分模板化，通过snippets来管理可以在不同ks templates中公用的流程片段。</p>
<p>我们的需求如下：</p>
<p>安装一个精简的CentOS7系统；
同时默认安装一些必要的软件包；
首次安装时只对系统盘进行分区和格式化，其他磁盘不动；
为了便于管理我们将更改网卡名为ethX，且默认禁用IPv6,；
为了方便使用虚拟机测试整个安装流程，需要在磁盘分区时自动适配磁盘名如vda/sda；
安装完成后能对一些基础配置进行初始化。&nbsp; &nbsp; &nbsp; &nbsp;</p>
<p>首先拷贝cobbler默认的template生成一个自定义的ks template，</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># kickstart template</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># (includes %end blocks)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># do not use with earlier distros</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#platform=x86, AMD64, or Intel EM64T</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># System authorization information</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">auth --useshadow --enablemd5</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># System bootloader configuration</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#bootloader --location=mbr</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># Partition clearing information</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">clearpart --all --initlabel</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># Use text mode install</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">text</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># Firewall configuration</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">firewall --disabled</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># Run the Setup Agent on first boot</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">firstboot --disable</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># System keyboard</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">keyboard us</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># System language</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">lang en_US</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># Use network installation</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">url --url=$tree</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># If any cobbler repo definitions were referenced in the kickstart profile, include them here.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$yum_repo_stanza</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># Network information</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$SNIPPET('network_config')</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># Reboot after installation</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">reboot</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#Root password</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">rootpw --iscrypted $default_password_crypted</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># SELinux configuration</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">selinux --disabled</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># Do not configure the X Window System</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">skipx</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># System timezone</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">timezone Asia/Shanghai</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># Install OS instead of upgrade</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">install</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># Clear the Master Boot Record</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">zerombr</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># Allow anaconda to partition the system as needed</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#autopart</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$SNIPPET('main_partition_select')</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">%pre</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$SNIPPET('log_ks_pre')</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$SNIPPET('kickstart_start')</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$SNIPPET('pre_install_network_config')</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$SNIPPET('pre_partition_select_custom')</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># Enable installation monitoring</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$SNIPPET('pre_anamon')</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">%end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">%packages</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@^minimal</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@core</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">chrony</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">wget</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">net-tools</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">python-setuptools</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">rsync</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">lrzsz</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">expect</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">tcl</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ntpdate</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-selinux-policy*</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-NetworkManager*</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-kexec-tools</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-snappy</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-wpa_supplicant</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-ppp</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">%end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">%addon com_redhat_kdump --disable --reserve-mb='auto'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">%end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">%post --nochroot</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$SNIPPET('log_ks_post_nochroot')</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">%end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">%post</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$SNIPPET('log_ks_post')</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># Start yum configuration</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$yum_config_stanza</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># End yum configuration</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$SNIPPET('post_install_kernel_options')</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$SNIPPET('post_install_network_config')</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$SNIPPET('download_config_files')</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$SNIPPET('cobbler_register')</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># Enable post-install boot notification</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$SNIPPET('post_anamon')</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$SNIPPET('post_install_custom_sys')</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># Start final steps</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$SNIPPET('kickstart_done')</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># End final steps</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">%end</span><br></span></code></pre></div></div>
<p>&nbsp;注意ks template中的红色部分为我们增加的自定义snippets，第一个pre_partition_select_custom作用是自动根据磁盘类型来生成分区和格式化选项，同时兼容虚拟机和物理机，内容如下：</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># Determine architecture-specific partitioning needs</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">if [ -b /dev/vda ]; then</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  cat &gt;/tmp/partinfo &lt;&lt; EOF</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">clearpart --initlabel --all</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ignoredisk --only-use=vda</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">bootloader --location=mbr --boot-drive=vda --driveorder=vda</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">clearpart --initlabel --drives=vda</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">part /boot --fstype=ext3 --ondisk=vda --size=500</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">part / --fstype=xfs --size=1024 --grow --ondisk=vda --asprimary</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EOF</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">elif [ -b /dev/sda ]; then</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  cat &gt;/tmp/partinfo &lt;&lt; EOF</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">clearpart --initlabel --all</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ignoredisk --only-use=sda</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">bootloader --location=mbr --boot-drive=sda --driveorder=sda</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">part /boot --fstype=ext3 --ondisk=sda --size=500</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">part / --fstype=xfs --size=100000 --ondisk=sda --asprimary</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">part /data --fstype=xfs --grow --ondisk=sda</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EOF</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">fi</span><br></span></code></pre></div></div>
<p>&nbsp;第二个post_install_custom_sys作用是在系统安装最后阶段对一些必要的配置进行更改，其中运行的是shell脚本，内容如下：</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># cat snippets/post_install_custom_sys</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">if ! grep -q 'custom_sysctl' /etc/sysctl.conf; then</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  cat &gt;&gt;/etc/sysctl.conf&lt;&lt;EOF</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">## custom_sysctl</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">fs.file-max = 262144</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">net.core.somaxconn = 10240</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">vm.swappiness = 0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">net.ipv4.ip_local_port_range = 1024 65000</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">net.core.rmem_max = 16777216</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">net.core.wmem_max = 16777216</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">net.core.rmem_default = 1048576</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">net.core.wmem_default = 524288</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">net.ipv4.tcp_rmem = 4096 87380 16777216</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">net.ipv4.tcp_wmem = 4096 65536 16777216</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">net.core.netdev_max_backlog = 2500</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">net.ipv4.tcp_max_syn_backlog = 40960</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">net.ipv4.tcp_syncookies = 1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">net.ipv4.tcp_tw_reuse = 1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">net.ipv4.tcp_tw_recycle = 1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">net.ipv4.tcp_fin_timeout = 30</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EOF</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">fi</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">chmod +x /etc/rc.d/rc.local</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">if grep -q '^UseDNS' /etc/ssh/sshd_config; then</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  sed -i 's/^UseDNS .*/UseDNS no/' /etc/ssh/sshd_config</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">else</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  sed -i 's/^#UseDNS .*/UseDNS no/' /etc/ssh/sshd_config</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">fi</span><br></span></code></pre></div></div>
<p>接下来还需要修改内核引导参数，完成网卡名字的变更及IPv6禁用：</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">sed -i -e 's|^GRUB_CMDLINE_LINUX=\"|GRUB_CMDLINE_LINUX=\"net.ifnames=0 biosdevname=0 |g' /etc/default/grub</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">sed -i -e 's|^GRUB_CMDLINE_LINUX=\"|GRUB_CMDLINE_LINUX=\"ipv6.disable=1 |g' /etc/default/grub</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">grub2-mkconfig -o /boot/grub2/grub.cfg</span><br></span></code></pre></div></div>
<p>通过这几部分的组合，即可生成一个完整可用的ks文件，下面我将介绍如何通过虚拟机来测试安装。</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="使用虚拟机测试pxe">使用虚拟机测试PXE<a href="https://itxx00.github.io/notes/blog/2022/04/20/pxe-cobbler-install#%E4%BD%BF%E7%94%A8%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%B5%8B%E8%AF%95pxe" class="hash-link" aria-label="使用虚拟机测试PXE的直接链接" title="使用虚拟机测试PXE的直接链接">​</a></h3>
<p>安装虚拟化相关软件包，使用kvm虚拟机，同时安装图形界面虚拟机管理工具virt-manager方便安装操作。网络选择使用bridge模式,点击新建虚拟机，在安装选项中选择PXE,注意内存设置必须大于1G，否则PXE引导进入系统后很可能报错。</p>]]></content>
        <category label="bash" term="bash"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[CVM使用ISO镜像安装银河麒麟v10 arm系统]]></title>
        <id>https://itxx00.github.io/notes/blog/2021/12/16/cvm-kylin-v10-iso-install</id>
        <link href="https://itxx00.github.io/notes/blog/2021/12/16/cvm-kylin-v10-iso-install"/>
        <updated>2021-12-16T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[背景：云上没有kylin的arm镜像,需要自己做一个]]></summary>
        <content type="html"><![CDATA[<p>背景：云上没有kylin的arm镜像,需要自己做一个</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="1-准备">1 准备<a href="https://itxx00.github.io/notes/blog/2021/12/16/cvm-kylin-v10-iso-install#1-%E5%87%86%E5%A4%87" class="hash-link" aria-label="1 准备的直接链接" title="1 准备的直接链接">​</a></h2>
<p>iso: Kylin-Server-10-SP2-aarch64-Release-Build09-20210524.iso</p>
<p>一台arm的cvm, 一块数据盘</p>
<p>scp  Kylin-Server-10-SP2-aarch64-Release-Build09-20210524.iso  x.x.x.x:/kylin.iso</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="2-配置grub">2 配置grub<a href="https://itxx00.github.io/notes/blog/2021/12/16/cvm-kylin-v10-iso-install#2-%E9%85%8D%E7%BD%AEgrub" class="hash-link" aria-label="2 配置grub的直接链接" title="2 配置grub的直接链接">​</a></h2>
<p>修改grub配置增加从iso引导的入口，重启机器时从iso引导进入安装流程</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># cat /etc/grub.d/40_custom</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#!/bin/sh</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">exec tail -n +3 $0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># This file provides an easy way to add custom menu entries.  Simply type the</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># menu entries you want to add after this comment.  Be careful not to change</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># the 'exec tail' line above.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">menuentry 'Install Kylin Linux Advanced Server V10' --class red --class gnu-linux --class gnu --class os {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    set isolabel="Kylin-Server-10"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    set isofile="/kylin.iso"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    insmod iso9660</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    loopback loop $isofile</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    linux (loop)/images/pxeboot/vmlinuz inst.stage2=hd:LABEL=Kylin-Server-10 ro iso-scan/filename=$isofile console=tty0 video=efifb:off video=VGA-1:640x480-32@60me</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    initrd (loop)/images/pxeboot/initrd.img</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre></div></div>
<p>上面的参数从哪获取来？
1</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">mount /kylin.iso /mnt</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">find /mnt -name grub.cfg</span><br></span></code></pre></div></div>
<p>找到的内容作为linux行的参考</p>
<p>2</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">blkid /kylin.iso</span><br></span></code></pre></div></div>
<p>可以获得isolabel信息</p>
<p>下一步</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">vi /etc/default/grub</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#修改GRUB_TIMEOUT=60 增加timeout方便web vnc登录操作</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">grub2-mkconfig --ouput=/boot/grub2/grub.cfg</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">sync</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">reboot</span><br></span></code></pre></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="3-开始装系统">3 开始装系统<a href="https://itxx00.github.io/notes/blog/2021/12/16/cvm-kylin-v10-iso-install#3-%E5%BC%80%E5%A7%8B%E8%A3%85%E7%B3%BB%E7%BB%9F" class="hash-link" aria-label="3 开始装系统的直接链接" title="3 开始装系统的直接链接">​</a></h2>
<p>系统会安装到数据盘，因为系统盘被iso占用，mount状态无法使用，必须有独立的数据盘用来装系统
注意安装cloud-init包。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="4-制作云镜像">4 制作云镜像<a href="https://itxx00.github.io/notes/blog/2021/12/16/cvm-kylin-v10-iso-install#4-%E5%88%B6%E4%BD%9C%E4%BA%91%E9%95%9C%E5%83%8F" class="hash-link" aria-label="4 制作云镜像的直接链接" title="4 制作云镜像的直接链接">​</a></h2>
<p>重启回到原先的系统</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">yum -y install qemu-img</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">qemu-img convert -f raw -O qcow2 /dev/vdb /kylin.qcow2</span><br></span></code></pre></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="5-镜像创建cvm后启动失败问题一例">5 镜像创建CVM后启动失败问题一例<a href="https://itxx00.github.io/notes/blog/2021/12/16/cvm-kylin-v10-iso-install#5-%E9%95%9C%E5%83%8F%E5%88%9B%E5%BB%BAcvm%E5%90%8E%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98%E4%B8%80%E4%BE%8B" class="hash-link" aria-label="5 镜像创建CVM后启动失败问题一例的直接链接" title="5 镜像创建CVM后启动失败问题一例的直接链接">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="报错信息如下">报错信息如下：<a href="https://itxx00.github.io/notes/blog/2021/12/16/cvm-kylin-v10-iso-install#%E6%8A%A5%E9%94%99%E4%BF%A1%E6%81%AF%E5%A6%82%E4%B8%8B" class="hash-link" aria-label="报错信息如下：的直接链接" title="报错信息如下：的直接链接">​</a></h3>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">/dev/disk/by-uuid/bed44859-b637-4490-b7f9-f62f952f6hfa Warning:does not exist</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Generating "/run/initramfs/rdsosreport.txt"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Entering emergency mode. Exit the shell to continue."journalctl" to view system logs.TypeYou might want to save "/run/initramfs/rdsosreport.txt" to a USB stick or /bootaftermounting them and attach it to a bug report.</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="原因分析">原因分析：<a href="https://itxx00.github.io/notes/blog/2021/12/16/cvm-kylin-v10-iso-install#%E5%8E%9F%E5%9B%A0%E5%88%86%E6%9E%90" class="hash-link" aria-label="原因分析：的直接链接" title="原因分析：的直接链接">​</a></h3>
<h5 class="anchor anchorWithStickyNavbar_LWe7" id="1virtio驱动安装的不准确或者异常">1.virtio驱动安装的不准确或者异常<a href="https://itxx00.github.io/notes/blog/2021/12/16/cvm-kylin-v10-iso-install#1virtio%E9%A9%B1%E5%8A%A8%E5%AE%89%E8%A3%85%E7%9A%84%E4%B8%8D%E5%87%86%E7%A1%AE%E6%88%96%E8%80%85%E5%BC%82%E5%B8%B8" class="hash-link" aria-label="1.virtio驱动安装的不准确或者异常的直接链接" title="1.virtio驱动安装的不准确或者异常的直接链接">​</a></h5>
<h5 class="anchor anchorWithStickyNavbar_LWe7" id="2内核缺陷本身导致">2.内核缺陷本身导致<a href="https://itxx00.github.io/notes/blog/2021/12/16/cvm-kylin-v10-iso-install#2%E5%86%85%E6%A0%B8%E7%BC%BA%E9%99%B7%E6%9C%AC%E8%BA%AB%E5%AF%BC%E8%87%B4" class="hash-link" aria-label="2.内核缺陷本身导致的直接链接" title="2.内核缺陷本身导致的直接链接">​</a></h5>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="解决方法">解决方法：<a href="https://itxx00.github.io/notes/blog/2021/12/16/cvm-kylin-v10-iso-install#%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95" class="hash-link" aria-label="解决方法：的直接链接" title="解决方法：的直接链接">​</a></h3>
<h5 class="anchor anchorWithStickyNavbar_LWe7" id="1virtio驱动的修复">1.Virtio驱动的修复<a href="https://itxx00.github.io/notes/blog/2021/12/16/cvm-kylin-v10-iso-install#1virtio%E9%A9%B1%E5%8A%A8%E7%9A%84%E4%BF%AE%E5%A4%8D" class="hash-link" aria-label="1.Virtio驱动的修复的直接链接" title="1.Virtio驱动的修复的直接链接">​</a></h5>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">查询</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">grep -i virtio /boot/config-$(uname -r)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">是否包含在临时文件系统</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">lsinitrd /boot/initramfs-$(uname -r).img | grep virtio</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">修复临时文件系统</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">vim /etc/dracut.conf</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">add_drivers+="virtio_blk virtio_scsi virtio_net virtio_pci virtio_ring virtio"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">dracut -f</span><br></span></code></pre></div></div>
<h5 class="anchor anchorWithStickyNavbar_LWe7" id="2内核缺陷规避">2.内核缺陷规避<a href="https://itxx00.github.io/notes/blog/2021/12/16/cvm-kylin-v10-iso-install#2%E5%86%85%E6%A0%B8%E7%BC%BA%E9%99%B7%E8%A7%84%E9%81%BF" class="hash-link" aria-label="2.内核缺陷规避的直接链接" title="2.内核缺陷规避的直接链接">​</a></h5>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">echo 'add_drivers+="xen-netfront xen-blkfront "' &gt; /etc/dracut.conf.d/xen.conf</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">KERNEL_VERSION=$(rpm -q kernel --qf '%{V}-%{R}.%{arch}\n'|head -n1)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">dracut -f /boot/initramfs-$KERNEL_VERSION.img $KERNEL_VERSION</span><br></span></code></pre></div></div>]]></content>
        <category label="kylin" term="kylin"/>
        <category label="cvm" term="cvm"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[银河麒麟v10 aarch64机器构建percona-xtrabackup-80 rpm包]]></title>
        <id>https://itxx00.github.io/notes/blog/2021/07/21/kylin-v10-aarch64-build-percona-xtrabackup-80-rpm</id>
        <link href="https://itxx00.github.io/notes/blog/2021/07/21/kylin-v10-aarch64-build-percona-xtrabackup-80-rpm"/>
        <updated>2021-07-21T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[如何自己构建aarch64 xtrabackup rpm]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="1-环境准备">1 环境准备<a href="https://itxx00.github.io/notes/blog/2021/07/21/kylin-v10-aarch64-build-percona-xtrabackup-80-rpm#1-%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87" class="hash-link" aria-label="1 环境准备的直接链接" title="1 环境准备的直接链接">​</a></h2>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">yum install cmake3 openssl-devel libaio libaio-devel automake autoconf bison libtool ncurses-devel \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    libgcrypt-devel libev-devel libcurl-devel zlib-devel vim-common readline-devel python-sphinx rpm-build</span><br></span></code></pre></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="2-获取最新srpm包">2 获取最新SRPM包<a href="https://itxx00.github.io/notes/blog/2021/07/21/kylin-v10-aarch64-build-percona-xtrabackup-80-rpm#2-%E8%8E%B7%E5%8F%96%E6%9C%80%E6%96%B0srpm%E5%8C%85" class="hash-link" aria-label="2 获取最新SRPM包的直接链接" title="2 获取��最新SRPM包的直接链接">​</a></h2>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># 查看需要下载的版本</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">https://repo.percona.com/yum/release/8/SRPMS/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#如：</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">wget https://repo.percona.com/yum/release/8/SRPMS/percona-xtrabackup-80-8.0.25-17.1.generic.src.rpm</span><br></span></code></pre></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="3-build-rpm">3 BUILD RPM<a href="https://itxx00.github.io/notes/blog/2021/07/21/kylin-v10-aarch64-build-percona-xtrabackup-80-rpm#3-build-rpm" class="hash-link" aria-label="3 BUILD RPM的直接链接" title="3 BUILD RPM的直接链接">​</a></h2>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">rpm -ivh percona-xtrabackup-80-8.0.25-17.1.generic.src.rpm</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">cd ~/rpmbuild</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">rpmbuild -bb --nodebuginfo SPECS/percona-xtrabackup.spec</span><br></span></code></pre></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="over">OVER<a href="https://itxx00.github.io/notes/blog/2021/07/21/kylin-v10-aarch64-build-percona-xtrabackup-80-rpm#over" class="hash-link" aria-label="OVER的直接链接" title="OVER的直接链接">​</a></h2>]]></content>
        <category label="bash" term="bash"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[UOS arm64机器build percona-xtrabackup-80 deb包]]></title>
        <id>https://itxx00.github.io/notes/blog/2021/07/21/uos-arm64-build-percona-xtrabackup-80</id>
        <link href="https://itxx00.github.io/notes/blog/2021/07/21/uos-arm64-build-percona-xtrabackup-80"/>
        <updated>2021-07-21T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[uos如何快速构建xtrabackup deb]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="1-系统环境">1 系统环境<a href="https://itxx00.github.io/notes/blog/2021/07/21/uos-arm64-build-percona-xtrabackup-80#1-%E7%B3%BB%E7%BB%9F%E7%8E%AF%E5%A2%83" class="hash-link" aria-label="1 系统环境的直接链接" title="1 系统环境的直接链接">​</a></h2>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">root@VM-0-14-linux:~# cat /etc/os-release</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PRETTY_NAME="uos 20"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">NAME="uos"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">VERSION_ID="20"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">VERSION="20"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ID=uos</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">HOME_URL="https://www.chinauos.com/"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">BUG_REPORT_URL="http://bbs.chinauos.com"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">root@VM-0-14-linux:~# uname -a</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Linux VM-0-14-linux 4.19.0-arm64-server #1635 SMP Mon Jan 13 16:07:12 CST 2020 aarch64 GNU/Linux</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">root@VM-0-14-linux:~# cat /etc/debian_version</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">10.1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">root@VM-0-14-linux:~#</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="2-配置perconca官方apt源">2 配置perconca官方apt源<a href="https://itxx00.github.io/notes/blog/2021/07/21/uos-arm64-build-percona-xtrabackup-80#2-%E9%85%8D%E7%BD%AEperconca%E5%AE%98%E6%96%B9apt%E6%BA%90" class="hash-link" aria-label="2 配置perconca官方apt源的直接链接" title="2 配置perconca官方apt源的直接链接">​</a></h2>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">wget https://repo.percona.com/apt/percona-release_latest.buster_all.deb</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">dpkg -i percona-release_latest.buster_all.deb</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 修改脚本中两个变量</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">vi /usr/bin/percona-release</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">CODENAME=buster</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">OS_VER=buster</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 开启perconca源</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">percona-release enable-only tools release</span><br></span></code></pre></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="3-build">3 BUILD<a href="https://itxx00.github.io/notes/blog/2021/07/21/uos-arm64-build-percona-xtrabackup-80#3-build" class="hash-link" aria-label="3 BUILD的直接链接" title="3 BUILD的直接链接">​</a></h2>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># 安装依赖</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">apt-get build-dep percona-xtrabackup-80</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 构建</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">apt-get source --compile percona-xtrabackup-80</span><br></span></code></pre></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="over">OVER<a href="https://itxx00.github.io/notes/blog/2021/07/21/uos-arm64-build-percona-xtrabackup-80#over" class="hash-link" aria-label="OVER的直接链接" title="OVER的直接链接">​</a></h2>]]></content>
        <category label="bash" term="bash"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[how to build a static tmux bin]]></title>
        <id>https://itxx00.github.io/notes/blog/2021/06/30/build-tmux-static</id>
        <link href="https://itxx00.github.io/notes/blog/2021/06/30/build-tmux-static"/>
        <updated>2021-06-30T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[build-tmux-static.sh]]></summary>
        <content type="html"><![CDATA[<p>build-tmux-static.sh</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">#!/bin/bash</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">TARGETDIR=$1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">if [ "$TARGETDIR" = "" ]; then</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">TARGETDIR=$(python -c 'import os; print os.path.realpath("local")')</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">fi</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mkdir -p $TARGETDIR</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">libevent() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  curl -LO https://github.com/libevent/libevent/releases/download/release-2.0.22-stable/libevent-2.0.22-stable.tar.gz</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  tar -zxvf libevent-2.0.22-stable.tar.gz</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  cd libevent-2.0.22-stable</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  ./configure --prefix=$TARGETDIR &amp;&amp; make &amp;&amp; make install</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  cd ..</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ncurses() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  curl -LO https://ftp.gnu.org/pub/gnu/ncurses/ncurses-6.0.tar.gz</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  tar zxvf ncurses-6.0.tar.gz</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  cd ncurses-6.0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  ./configure --with-termlib --prefix $TARGETDIR \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              --with-default-terminfo-dir=/usr/share/terminfo \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              --with-terminfo-dirs="/etc/terminfo:/lib/terminfo:/usr/share/terminfo" \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              --enable-pc-files \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              --with-pkg-config-libdir=$TARGETDIR/lib/pkgconfig \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  &amp;&amp; make &amp;&amp; make install</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  cd ..</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">tmux() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  curl -LO https://github.com/tmux/tmux/releases/download/3.2a/tmux-3.2a.tar.gz</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  tar zxvf tmux-3.2a.tar.gz</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  cd tmux-3.2a</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  PKG_CONFIG_PATH=$TARGETDIR/lib/pkgconfig ./configure --enable-static --prefix=$TARGETDIR &amp;&amp; make &amp;&amp; make install</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  cd ..</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  cp $TARGETDIR/bin/tmux .</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">libevent</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ncurses</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">tmux</span><br></span></code></pre></div></div>]]></content>
        <category label="bash" term="bash"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用dozzle通过web界面实时查看docker日志]]></title>
        <id>https://itxx00.github.io/notes/blog/2021/06/08/dozzle-realtime-docker-log-view</id>
        <link href="https://itxx00.github.io/notes/blog/2021/06/08/dozzle-realtime-docker-log-view"/>
        <updated>2021-06-08T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[如何通过web界面查看docker容器日志]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="1-运行dozzle">1 运行dozzle<a href="https://itxx00.github.io/notes/blog/2021/06/08/dozzle-realtime-docker-log-view#1-%E8%BF%90%E8%A1%8Cdozzle" class="hash-link" aria-label="1 运行dozzle的直接链接" title="1 运行dozzle的直接链接">​</a></h2>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">docker run --detach --volume=/var/run/docker.sock:/var/run/docker.sock --net host  amir20/dozzle --addr 127.0.0.1:8080  --base /dockerlogs</span><br></span></code></pre></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="2-反向代理">2 反向代理<a href="https://itxx00.github.io/notes/blog/2021/06/08/dozzle-realtime-docker-log-view#2-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86" class="hash-link" aria-label="2 反向代理的直接链接" title="2 反向代理的直接链接">​</a></h2>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">server {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    listen 80;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    server_name xxx;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    client_max_body_size 1G;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    add_header  Access-Control-Allow-Origin "https://xxx";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    add_header  Access-Control-Allow-Methods "GET, POST, OPTIONS";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    add_header  Access-Control-Allow-Headers "Origin, Authorization, Accept";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    add_header  Access-Control-Allow-Credentials true;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    location ^~ /dockerlogs {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        proxy_pass http://localhost:8080;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="3-访问">3 访问<a href="https://itxx00.github.io/notes/blog/2021/06/08/dozzle-realtime-docker-log-view#3-%E8%AE%BF%E9%97%AE" class="hash-link" aria-label="3 访问的直接链接" title="3 访问的直接链接">​</a></h2>
<p><a href="http://x.x.x.x/dockerlogs" target="_blank" rel="noopener noreferrer">http://x.x.x.x/dockerlogs</a></p>]]></content>
        <category label="bash" term="bash"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[中标麒麟系统ansible执行yum模块报错的问题分析]]></title>
        <id>https://itxx00.github.io/notes/blog/2021/03/22/neokylin-ansible-yum-module-not-work</id>
        <link href="https://itxx00.github.io/notes/blog/2021/03/22/neokylin-ansible-yum-module-not-work"/>
        <updated>2021-03-22T00:00:00.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>在使用中标麒麟V7Update6版本时，遇到了一个ansible执行报错的问题</p>
</blockquote>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="问题现象">问题现象<a href="https://itxx00.github.io/notes/blog/2021/03/22/neokylin-ansible-yum-module-not-work#%E9%97%AE%E9%A2%98%E7%8E%B0%E8%B1%A1" class="hash-link" aria-label="问题现象的直接链接" title="问题现象的直接链接">​</a></h2>
<p>在中标麒麟（neokylin）系统中部署某服务，使用到了ansible，但是执行时发现有yum模块的task报错如下：</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">TASK [common : Install basic rpms] **************************************************************************</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">fatal: [node01]: FAILED! =&gt; {"changed": false, "msg": ["Could not detect which major revision of yum is in use, which is required to determine module backend.", "You can manually specify use_backend to tell the module whether to use the yum (yum3) or dnf (yum4) backend})"]}</span><br></span></code></pre></div></div>
<p>报错为yum模块无法判断出系统的yum版本，提示需要手工执行yum的use_backend参数。同样的task在原生RHEL7系统执行没有遇到任何问题，看样子调入了中标麒麟的某个坑里。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="问题分析">问题分析<a href="https://itxx00.github.io/notes/blog/2021/03/22/neokylin-ansible-yum-module-not-work#%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90" class="hash-link" aria-label="问题分析的直接链接" title="问题分析的直接链接">​</a></h2>
<p>根据报错，很明确是因为ansible无法自动判断出系统使用的yum版本导致，我们知道当ansible中yum模块不指定use_backend参数时，将尝试自动判断，而ansible的setup模块可以获取对应的必要信息，
其中一个变量ansible_pkg_mgr及对应yum后端模块，接下来我们执行setup模块输出ansible_pkg_mgr变量来验证下我们的判断：</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># ansible -i hosts node01 -m setup -a "filter=ansible_pkg_mgr"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">node01 | SUCCESS =&gt; {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "ansible_facts": {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        "discovered_interpreter_python": "/usr/bin/python"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    },</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "changed": false</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre></div></div>
<p>果然没有办法获取到ansible_pkg_mgr变量，先看下系统版本信息:</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">~]# cat /etc/neokylin-release</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">NeoKylin Linux Advanced Server release V7Update6 (Chromium)</span><br></span></code></pre></div></div>
<p>接下来根据报错提示信息找到ansible相关代码，在yum.py中，相关代码如下：
ansible/plugins/action/yum.py</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">        if module not in ["yum", "yum4", "dnf"]:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            facts = self._execute_module(module_name="setup", module_args=dict(filter="ansible_pkg_mgr", gather_subset="!all"), task_vars=task_vars)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            display.debug("Facts %s" % facts)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            module = facts.get("ansible_facts", {}).get("ansible_pkg_mgr", "auto")</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            if (not self._task.delegate_to or self._task.delegate_facts) and module != 'auto':</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                result['ansible_facts'] = {'pkg_mgr': module}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if module != "auto":</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            if module == "yum4":</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                module = "dnf"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            if module not in self._shared_loader_obj.module_loader:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                result.update({'failed': True, 'msg': "Could not find a yum module backend for %s." % module})</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            else:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                # run either the yum (yum3) or dnf (yum4) backend module</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                new_module_args = self._task.args.copy()</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                if 'use_backend' in new_module_args:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    del new_module_args['use_backend']</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                display.vvvv("Running %s as the backend for the yum action plugin" % module)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                result.update(self._execute_module(module_name=module, module_args=new_module_args, task_vars=task_vars, wrap_async=self._task.async_val))</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                # Now fall through to cleanup</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        else:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            result.update(</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    'failed': True,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    'msg': ("Could not detect which major revision of yum is in use, which is required to determine module backend.",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                            "You can manually specify use_backend to tell the module whether to use the yum (yum3) or dnf (yum4) backend})"),</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            )</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            # Now fall through to cleanup</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre></div></div>
<p>如代码所示，当执行yum未指定use_backend参数时，ansible会执行setup模块并根据ansible_pkg_mgr来自动判断yum的版本，获取不到则会报错，继续看下该参数的获取过程，找到pkg_mgr.py，关键代码如下：</p>
<p>ansible/module_utils/facts/system/pkg_mgr.py</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    def collect(self, module=None, collected_facts=None):</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        facts_dict = {}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        collected_facts = collected_facts or {}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        pkg_mgr_name = 'unknown'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        for pkg in PKG_MGRS:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            if os.path.exists(pkg['path']):</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                pkg_mgr_name = pkg['name']</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        # Handle distro family defaults when more than one package manager is</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        # installed or available to the distro, the ansible_fact entry should be</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        # the default package manager officially supported by the distro.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if collected_facts['ansible_os_family'] == "RedHat":</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            pkg_mgr_name = self._check_rh_versions(pkg_mgr_name, collected_facts)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">... ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> def _check_rh_versions(self, pkg_mgr_name, collected_facts):</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if collected_facts['ansible_distribution'] == 'Fedora':</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            if os.path.exists('/run/ostree-booted'):</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                return "atomic_container"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            try:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                if int(collected_facts['ansible_distribution_major_version']) &lt; 23:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    for yum in [pkg_mgr for pkg_mgr in PKG_MGRS if pkg_mgr['name'] == 'yum']:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        if os.path.exists(yum['path']):</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                            pkg_mgr_name = 'yum'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                            break</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                else:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    for dnf in [pkg_mgr for pkg_mgr in PKG_MGRS if pkg_mgr['name'] == 'dnf']:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        if os.path.exists(dnf['path']):</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                            pkg_mgr_name = 'dnf'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                            break</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            except ValueError:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                # If there's some new magical Fedora version in the future,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                # just default to dnf</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                pkg_mgr_name = 'dnf'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        elif collected_facts['ansible_distribution'] == 'Amazon':</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            pkg_mgr_name = 'yum'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        else:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            # If it's not one of the above and it's Red Hat family of distros, assume</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            # RHEL or a clone. For versions of RHEL &lt; 8 that Ansible supports, the</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            # vendor supported official package manager is 'yum' and in RHEL 8+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            # (as far as we know at the time of this writing) it is 'dnf'.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            # If anyone wants to force a non-official package manager then they</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            # can define a provider to either the package or yum action plugins.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            if int(collected_facts['ansible_distribution_major_version']) &lt; 8:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                pkg_mgr_name = 'yum'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            else:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                pkg_mgr_name = 'dnf'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return pkg_mgr_name</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre></div></div>
<p>以上代码可以看到当判断系统为红帽系，则会继续判断系统版本信息，当主版本号小于8则使用yum，否则使用dnf，这里我们初步判断为麒麟对系统做了某些修改导致无法获取到主版本号。先执行setup获取发行版代号验证下是否执行了上述逻辑：</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># ansible -i hosts node01 -m setup -a "filter=ansible_distribution"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">node01 | SUCCESS =&gt; {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "ansible_facts": {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        "ansible_distribution": "RedHat",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        "discovered_interpreter_python": "/usr/bin/python"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    },</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "changed": false</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># ansible -i hosts node01 -m setup -a "filter=ansible_distribution_major_version"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">node01 | SUCCESS =&gt; {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "ansible_facts": {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        "ansible_distribution_major_version": "V7Update6",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        "discovered_interpreter_python": "/usr/bin/python"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    },</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "changed": false</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre></div></div>
<p>通过setup模块的输出结果可看到系统是判断为redhat发行版，但是通过ansible_distribution_major_version获取到的发行版主版本号为V7Update6,
而和上面判断yum版本的代码关联起来看就会发现问题所在，int(collected_facts['ansible_distribution_major_version']) &lt; 8 中，ansible_distribution_major_version 变量在其初始化的代码中对应为为distribution_version.split('.')[:2][0]的取值，而当系统中获取到的值是V7Update6时，该显然无法满足转换为int的要求。接下来看下V7Update6这个关键字的定义位置，根据经验系统版本相关信息应该在/etc/os-release中：</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">~]# cat /etc/os-release</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">NAME="NeoKylin Linux Advanced Server"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">VERSION="V7Update6 (Chromium)"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ID="neokylin"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ID_LIKE="fedora"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">VARIANT="Server"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">VARIANT_ID="server"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">VERSION_ID="V7Update6"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PRETTY_NAME="NeoKylin Linux Advanced Server V7Update6 (Chromium)"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ANSI_COLOR="0;31"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">CPE_NAME="cpe:/o:neokylin:enterprise_linux:V7Update6:GA:server"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">HOME_URL="https://www.cs2c.com.cn/"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">BUG_REPORT_URL="https://bugzilla.cs2c.com.cn/"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">NEOKYLIN_BUGZILLA_PRODUCT="NeoKylin Linux Advanced Server 7"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">NEOKYLIN_BUGZILLA_PRODUCT_VERSION=V7Update6</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">NEOKYLIN_SUPPORT_PRODUCT="NeoKylin Linux Advanced Server"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">NEOKYLIN_SUPPORT_PRODUCT_VERSION="V7Update6"</span><br></span></code></pre></div></div>
<p>这里果然可以看到VERSION_ID的值被定义为<code>V7Update6</code>，而系统原生发行版中该值是7，我们来看下os-release中对VERSION_ID参数的说明：</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">man os-release</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">... ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       VERSION_ID=</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">           A lower-case string (mostly numeric, no spaces or other characters outside of 0-9, a-z, ".",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">           "_" and "-") identifying the operating system version, excluding any OS name information or</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">           release code name, and suitable for processing by scripts or usage in generated filenames. This</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">           field is optional. Example: "VERSION_ID=17" or "VERSION_ID=11.04".</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">... ...</span><br></span></code></pre></div></div>
<p>根据man文档中的描述，VERSION_ID取值范围为全小写，通常为数值型，不应有空格或其他特殊字符，可包含的字符为0-9a-z._-,那么这里可以看到两个问题，
第一个问题是kylin的VERSION_ID不符合此描述，包含了大写字符，第二个问题是VERSION_ID可以包含a-z字母，但是通常是数值如17,11.04等。
但由于常见发行版都将此处处理为数值型，就导致ansible按照此约定俗成固化了其获取系统版本的方法，并试图将一个字符串转换为int，不能满足当VERSION_ID包含了字母的情况。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="验证结论">验证结论<a href="https://itxx00.github.io/notes/blog/2021/03/22/neokylin-ansible-yum-module-not-work#%E9%AA%8C%E8%AF%81%E7%BB%93%E8%AE%BA" class="hash-link" aria-label="验证结论的直接链接" title="验证结论的直接链接">​</a></h2>
<p>通过以上判断看到VERSION_ID是导致该问题现象的关键，那么我们可以尝试修改一下该参数值，再执行setup看看是否可以正常工作：</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># grep VERSION_ID /etc/os-release</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">VERSION_ID="7"</span><br></span></code></pre></div></div>
<p>这里我把VERSION_ID修改成了数字7，再执行setup观察ansible_pkg_mgr变量是否能获取到：</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># ansible -i hosts node01 -m setup -a "filter=ansible_pkg_mgr"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">node01 | SUCCESS =&gt; {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "ansible_facts": {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        "ansible_pkg_mgr": "yum",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        "discovered_interpreter_python": "/usr/bin/python"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    },</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "changed": false</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre></div></div>
<p>可以看到，修改os-release中VERSION_ID为纯数值后，setup就可以正常判断到系统版本，进而可以获取到正确的yum版本了。
通过以上可以看到操作系统中即便是一些不起眼的细枝末节，处理不当也可能引发"连锁反应"。</p>]]></content>
        <category label="bash" term="bash"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[bashrc与profile的加载顺序]]></title>
        <id>https://itxx00.github.io/notes/blog/2021/02/24/bash-rc-profile-exec-order</id>
        <link href="https://itxx00.github.io/notes/blog/2021/02/24/bash-rc-profile-exec-order"/>
        <updated>2021-02-24T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[看下bashrc和profile的执行顺序到底是什么样的]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>在使用bashrc和profile设置环境变量时，如果多个地方都有同一个变量的设置，则需要注意不同配置文件的加载顺序问题</p>
</blockquote>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="背景">背景<a href="https://itxx00.github.io/notes/blog/2021/02/24/bash-rc-profile-exec-order#%E8%83%8C%E6%99%AF" class="hash-link" aria-label="背景的直接链接" title="背景的直接链接">​</a></h2>
<p>如果加载顺序没弄明白，有可能会在使用过程中遇到各种困扰，比如为什么设置了profile但是环境变量不生效？为什么变量ssh后获取的不一样？下面我们以CentOS7系统为例，通过一个简单的小实验来观察下到底bash的几个配置文件加载顺序是怎样的。</p>
<p>我们知道可以用来设置环境变量的文件常用的有以下几个：</p>
<ul>
<li>/etc/profile</li>
<li>/etc/profile.d/*.sh</li>
<li>/etc/bashrc</li>
<li>~/.bash_profile</li>
<li>~/.bashrc</li>
</ul>
<p>而不同的文件加载时机又分为login shell和non-login shell两种情况。这两种情况需要区分对待，及不同的文件要在对应场景下才能生效。假设有一个相同的变量设置出现在各个文件里面，通过对不同文件的变量值进行差异设置即可观察出各个配置的加载优先级和生效情况。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="实�验">实验<a href="https://itxx00.github.io/notes/blog/2021/02/24/bash-rc-profile-exec-order#%E5%AE%9E%E9%AA%8C" class="hash-link" aria-label="实验的直接链接" title="实验的直接链接">​</a></h2>
<p>先写入各个配置文件如下：</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># tail -n1 /etc/profile /etc/bashrc /etc/profile.d/well.sh ~/.bash_profile ~/.bashrc</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">==&gt; /etc/profile &lt;==</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">export WELL=etc-profile</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">==&gt; /etc/bashrc &lt;==</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">export WELL=etc-bashrc</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">==&gt; /etc/profile.d/well.sh &lt;==</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">export WELL=etc-profile-d</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">==&gt; /root/.bash_profile &lt;==</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">export WELL=home-bash-profile</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">==&gt; /root/.bashrc &lt;==</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">export WELL=home-bashrc</span><br></span></code></pre></div></div>
<p>接下来开始观察，需要注意的是每次修改配置之后新开shell重新加载环境配置：</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">[root@localhost ~]# echo $WELL</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">home-bash-profile</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[root@localhost ~]# ssh localhost 'echo $WELL'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">home-bashrc</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[root@localhost ~]#</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[root@localhost ~]# sed -i '$d' ~/.bashrc</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[root@localhost ~]# sed -i '$d' ~/.bash_profile</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[root@localhost ~]#</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[root@localhost ~]# echo $WELL</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">etc-bashrc</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[root@localhost ~]# ssh localhost 'echo $WELL'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">etc-bashrc</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[root@localhost ~]#</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[root@localhost ~]# sed -i '$d' /etc/bashrc</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[root@localhost ~]# echo $WELL</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">etc-profile</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[root@localhost ~]# ssh localhost 'echo $WELL'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">etc-profile-d</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[root@localhost ~]#</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 重新写入~/.bashrc后</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[root@localhost ~]# echo $WELL</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">home-bashrc</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[root@localhost ~]# ssh localhost 'echo $WELL'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">etc-profile-d</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[root@localhost ~]#</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 重新写入~/.bash_profile,去掉~/.bashrc后</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[root@localhost ~]# echo $WELL</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">home-bash-profile</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[root@localhost ~]# ssh localhost 'echo $WELL'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">etc-profile-d</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[root@localhost ~]#</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre></div></div>
<p>需要注意的是以上测试是将变量放到每个配置末行，因为配置之间有互相加载的机制，如果放在其他位置则测试结果会不一样。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="结论">结论<a href="https://itxx00.github.io/notes/blog/2021/02/24/bash-rc-profile-exec-order#%E7%BB%93%E8%AE%BA" class="hash-link" aria-label="结论的直接链接" title="结论的直接链接">​</a></h2>
<p>观察上面的结果，可以得出以下实验结论：</p>
<p>1 login shell会加载所有配置,优先级为~/.bash_profile ~/.bashrc /etc/bashrc /etc/profile /etc/profile.d</p>
<p>2 non-login shell时加载优先级为 ~/.bashrc /etc/bashrc /etc/profile.d</p>
<p>3 non-login shell不会加载的配置有 ~/.bash_profile /etc/profile</p>
<p>4 两种情况下都会加载的有~/.bashrc /etc/bashrc /etc/profile.d</p>
<p>那么如果我们需要在系统全局设置一个环境变量，要保证login shell和non-login shell都能表现一致，需要如何设置呢？</p>
<p>因为~/.bashrc为用户局部配置文件，不影响全局，而/etc/bashrc为系统内置文件不建议修改，如果是有全局环境变量需要设置建议放置到/etc/profile.d</p>
<p>over.</p>]]></content>
        <category label="bash" term="bash"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用conventional-changelog和Strapdown.js为git仓库自动生成changelog html页面]]></title>
        <id>https://itxx00.github.io/notes/blog/2021/01/15/auto-create-changelog-html</id>
        <link href="https://itxx00.github.io/notes/blog/2021/01/15/auto-create-changelog-html"/>
        <updated>2021-01-15T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[通过简单的工具组合为git项目生成简单的changelog html]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>一个项目的changelog对于使用者来说虽然不需要重点关注，但很重要</p>
</blockquote>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="基本思路">基本思路<a href="https://itxx00.github.io/notes/blog/2021/01/15/auto-create-changelog-html#%E5%9F%BA%E6%9C%AC%E6%80%9D%E8%B7%AF" class="hash-link" aria-label="基本思路的直接链接" title="基本思路的直接链接">​</a></h2>
<p>通常软件产品对外发布时，我们需要提供一份changelog以告知使用者新版本所发生的变化，有两种方式可以产生需要的changelog内容， 一种是人工整理和编写，另外一种是通过工具实现自动化。这里介绍一种通过开源工具的组合快速实现自动生成的方法。</p>
<p>我们在开发过程中所有变更都会反映到git commit messages里面，git提交历史几乎可以反映软件的所有变更，基于此我们可以使用工具直接将git提交历史转化为changelog，再经过简单加工处理即可对外输出一个html页面。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="规范提交">规范提交<a href="https://itxx00.github.io/notes/blog/2021/01/15/auto-create-changelog-html#%E8%A7%84%E8%8C%83%E6%8F%90%E4%BA%A4" class="hash-link" aria-label="规范提交的直接链接" title="规范提交的直接链接">​</a></h2>
<p>这就要求在代码提交过程中我们的commit message要规范化，其中一种被广为认可的规范名为约定式提交。详细可参考<a href="https://www.conventionalcommits.org/zh-hans" target="_blank" rel="noopener noreferrer">约定式提交</a>
一个简单的提交类型参考如下：</p>
<ul>
<li><strong>build</strong>: 变更仅影响工具出包或者build环境等外部依赖问题</li>
<li><strong>ci</strong>: 对CI配置的变更</li>
<li><strong>docs</strong>: 仅文档内容变更</li>
<li><strong>feat</strong>: 新特性</li>
<li><strong>fix</strong>: bug修复</li>
<li><strong>perf</strong>: 无bug修复/无新特性，仅性能提升</li>
<li><strong>refactor</strong>: 无bug修复/无新特性/无性能提升，仅重构</li>
<li><strong>style</strong>: 仅代码风格更改</li>
<li><strong>test</strong>: 仅测试代码变更</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="提交转化为markdown">提交转化为markdown<a href="https://itxx00.github.io/notes/blog/2021/01/15/auto-create-changelog-html#%E6%8F%90%E4%BA%A4%E8%BD%AC%E5%8C%96%E4%B8%BAmarkdown" class="hash-link" aria-label="提交转化为markdown的直接链接" title="提交转化为markdown的直接链接">​</a></h2>
<p>有了规范的提交记录，下面就可以通过工具实现提交记录到markdown的转化。这里介绍一个工具叫conventional-changelog，命令行版本使用方法如下：</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># install</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">npm install -g conventional-changelog-cli</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># generate changelog markdown file</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">cd your-git-repo-project-home</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">conventional-changelog -p angular -i CHANGELOG.md -s -r 0</span><br></span></code></pre></div></div>
<p>示例中用到的参数：</p>
<ul>
<li>-i : 读入已有changelog文件</li>
<li>-p : 预设模板，可以是angular/atom/codemirror/ember/eslint/express/jquery/jscs/jshint</li>
<li>-s : 写到目标文件名和-i指定的文件同名</li>
<li>-r : 指定需要生成的release数量，0表示重新生成所有</li>
</ul>
<p>更多参数可以执行<code>conventional-changelog --help</code>查看。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="markdown转化为html">markdown转化为html<a href="https://itxx00.github.io/notes/blog/2021/01/15/auto-create-changelog-html#markdown%E8%BD%AC%E5%8C%96%E4%B8%BAhtml" class="hash-link" aria-label="markdown转化为html的直接链接" title="markdown转化为html的直接链接">​</a></h2>
<p>这样我们就得到了一份名为CHANGELOG.md的历史变更记录文件，为markdown格式。接下来再通过另外一个工具名叫strapdown.js来自动生成html。</p>
<p>strapdown.js是一个js文件，不需要像上面生成markdown那样在server端生成，只需要在单个html页面中引入该js文件即可实现从markdown自动渲染出html页面。详细可参考<a href="https://strapdownjs.com/" target="_blank" rel="noopener noreferrer">strapdown.js</a></p>
<p>使用方法如下：</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">cat &gt;changelog.html &lt;&lt;"EOF"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;!DOCTYPE html&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;html&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;title&gt;XXX Changelog&lt;/title&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;meta charset="utf-8"&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;xmp theme="darkly" style="display:none;"&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EOF</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">cat CHANGELOG.md &gt;&gt;changelog.html</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">cat &gt;&gt;changelog.html &lt;&lt;"EOF"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/xmp&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;script src="http://strapdownjs.com/v/0.2/strapdown.js"&gt;&lt;/script&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/html&gt;</span><br></span></code></pre></div></div>
<p>这样我们就通过拼接的方式生成了一份changelog.html。需要注意的是changlog内容中不能包含<code>&lt;/xmp&gt;</code>关键字。</p>
<p>over.</p>]]></content>
        <category label="changelog" term="changelog"/>
        <category label="conventional-changelog" term="conventional-changelog"/>
        <category label="strapdown.js" term="strapdown.js"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用rpmrebuild修改rpm包内容]]></title>
        <id>https://itxx00.github.io/notes/blog/2020/04/07/change-rpm-file-using-rpmrebuild</id>
        <link href="https://itxx00.github.io/notes/blog/2020/04/07/change-rpm-file-using-rpmrebuild"/>
        <updated>2020-04-07T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[一种rpm包的魔改方式]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>某些特殊紧急情况下... ...</p>
</blockquote>
<p>某些特殊紧急情况下没法等到重新从源码编译打包，手里只有一个打包好的rpm，但是里面内容需要在安装前就改掉，比如修改某个文件内容等，这个时候rpmrebuild命令可以派上用场。
rpmrebuild工作时会把rpm包内容释放到一个临时目录，如果需要修改rpm包里面的文件的话， 可以通过-m参数指定执行的命令，比如/bin/bash，这样就可以得到一个交互式的shell，
有了交互式shell想象空间就很大了，你可以在这个shell环境下对rpm包释放出来的文件任意修改，当退出这个shell时，rpmrebuild会把改动打包回新的rpm。
例如：</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">rpmrebuild -m /bin/bash -np rpm/xxx.rpm</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 此时我们得到一个交互shell，</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 比如知道需要修改的文件名为aaa，可以这样操作：</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">find / -name aaa</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 尽情发挥吧，完了退出</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ctrl+D</span><br></span></code></pre></div></div>
<p>现在你就得到修改好内容之后的新rpm了。</p>]]></content>
        <category label="bash" term="bash"/>
        <category label="rpm" term="rpm"/>
        <category label="rpmrebuild" term="rpmrebuild"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[python脚本解压gbk编码zip]]></title>
        <id>https://itxx00.github.io/notes/blog/2020/03/27/unzip-gbk-with-python</id>
        <link href="https://itxx00.github.io/notes/blog/2020/03/27/unzip-gbk-with-python"/>
        <updated>2020-03-27T00:00:00.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>编码问题很烦人</p>
</blockquote>
<p>gbk编码的zip在linux下解压出来文件名会乱码，可以用下面脚本解压过程中转换下</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">#!/usr/bin/env python2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># coding: utf-8</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import os</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import sys</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import zipfile</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">f = zipfile.ZipFile(sys.argv[1],"r");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">for n in f.namelist():</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    try:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        u = n.decode("gbk")</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    except:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        u = n</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    p = os.path.dirname(u)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    if not p:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        continue</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    if not os.path.exists(p):</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        os.makedirs(p)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    d = file.read(n)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    if os.path.exists(u):</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        continue</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    with open(u, "w") as o:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        o.write(data)</span><br></span></code></pre></div></div>]]></content>
        <category label="bash" term="bash"/>
        <category label="python" term="python"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[CentOS8安装后grub菜单增加windows入口]]></title>
        <id>https://itxx00.github.io/notes/blog/2020/03/12/centos8-bootmenu-add-windows</id>
        <link href="https://itxx00.github.io/notes/blog/2020/03/12/centos8-bootmenu-add-windows"/>
        <updated>2020-03-12T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[默认安装完不会自动识别其他系统，需要手工添加]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>电脑双系统centos+windows，安装完centos8之后默认没有引导windows的入口，按照下面方法手搓即可。</p>
</blockquote>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="1-启动进入centos">1 启动进入centos<a href="https://itxx00.github.io/notes/blog/2020/03/12/centos8-bootmenu-add-windows#1-%E5%90%AF%E5%8A%A8%E8%BF%9B%E5%85%A5centos" class="hash-link" aria-label="1 启动进入centos的直接链接" title="1 启动进入centos的直接链接">​</a></h2>
<p>查看磁盘分区信息，如下：
<code>fdisk -l</code></p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># fdisk -l</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Disk /dev/sda: 238.5 GiB, 256060514304 bytes, 500118192 sectors</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Units: sectors of 1 * 512 = 512 bytes</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Sector size (logical/physical): 512 bytes / 512 bytes</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Disklabel type: dos</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Disk identifier: 0x297f5cef</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Device     Boot     Start       End   Sectors   Size Id Type</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/dev/sda1  *         2048 250058751 250056704 119.2G  7 HPFS/NTFS/exFAT</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/dev/sda2       250058752 393418751 143360000  68.4G  7 HPFS/NTFS/exFAT</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/dev/sda3       393418752 394442751   1024000   500M 83 Linux</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/dev/sda4       394442752 500117503 105674752  50.4G  5 Extended</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/dev/sda5       394444800 500117503 105672704  50.4G 83 Linux</span><br></span></code></pre></div></div>
<p>通过fdisk结果看到windows第一个partion在sda1，对应grub的磁盘索引编号是hd0,1,接下来编辑grub配置文件，自定义配置路径：</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"> vi  /etc/grub.d/40_custom</span><br></span></code></pre></div></div>
<p>配置示例如下：</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"> #!/bin/sh</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> exec tail -n +3 $0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> # This file provides an easy way to add custom menu entries.  Simply type the</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> # menu entries you want to add after this comment.  Be careful not to change</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> # the 'exec tail' line above.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> menuentry "Windows" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">         set root=(hd0,1)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">         chainloader +1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">         }</span><br></span></code></pre></div></div>
<p>保存并执行以下命令使自定义配置生效：</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">grub2-mkconfig --output=/boot/grub2/grub.cfg</span><br></span></code></pre></div></div>
<p>OVER.</p>]]></content>
        <category label="os" term="os"/>
        <category label="centos" term="centos"/>
        <category label="grub" term="grub"/>
        <category label="centos8" term="centos8"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[shell style guide]]></title>
        <id>https://itxx00.github.io/notes/blog/2020/01/03/shell-standards</id>
        <link href="https://itxx00.github.io/notes/blog/2020/01/03/shell-standards"/>
        <updated>2020-01-03T00:00:00.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>这里是一句长长的引言</p>
</blockquote>
<ul>
<li>Shell 编码规范</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="前言">前言<a href="https://itxx00.github.io/notes/blog/2020/01/03/shell-standards#%E5%89%8D%E8%A8%80" class="hash-link" aria-label="前言的直接链接" title="前言的直接链接">​</a></h2>
<p>与其它的编程规范一样，这里所讨论的不仅仅是编码格式美不美观的问题， 同时也讨论一些约定及编码标准。这份文档主要侧重于我们所普遍遵循的规则， 对于那些不是明确强制要求的，我们尽量避免提供意见。</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="为什么要有编码规范">为什么要有编码规范<a href="https://itxx00.github.io/notes/blog/2020/01/03/shell-standards#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E6%9C%89%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83" class="hash-link" aria-label="为什么要有编码规范的直接链接" title="为什么要有编码规范的直接链接">​</a></h3>
<p>编码规范对于程序员而言尤为重要，有以下几个原因：</p>
<ul>
<li>一个软件的生命周期中，80%的花费在于维护</li>
<li>几乎没有任何一个软件，在其整个生命周期中，均由最初的开发人员来维护</li>
<li>编码规范可以改善软件的可读性，可以让程序员尽快而彻底地理解新的代码</li>
<li>如果你将源码作为产品发布，就需要确任它是否被很好的打包并且清晰无误，一如你已构建的其它任何产品</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="编码规范原则">编码规范原则<a href="https://itxx00.github.io/notes/blog/2020/01/03/shell-standards#%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E5%8E%9F%E5%88%99" class="hash-link" aria-label="编码规范原则的直接链接" title="编码规范原则的直接链接">​</a></h3>
<p>本文档中的准则致力于最大限度达到以下原则：</p>
<ul>
<li>正确性</li>
<li>可读性</li>
<li>可维护性</li>
<li>可调试性</li>
<li>一致性</li>
<li>美观</li>
</ul>
<p>尽管本文档涵盖了许多基础知识，但应注意的是，没有编码规范可以为我们回答所有问题，开发人员始终需要再编写完代码后，对上述原则做出正确的判断。</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="代码规范等级定义">代码规范等级定义<a href="https://itxx00.github.io/notes/blog/2020/01/03/shell-standards#%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E7%AD%89%E7%BA%A7%E5%AE%9A%E4%B9%89" class="hash-link" aria-label="代码规范等级定义的直接链接" title="代码规范等级定义的直接链接">​</a></h3>
<ul>
<li><strong>可选（Optional）</strong>：用户可参考，自行决定是否采用；</li>
<li><strong>推荐（Preferable）</strong>：用户理应采用，但如有特殊情况，可以不采用；</li>
<li><strong>必须（Mandatory）</strong>：用户必须采用（除非是少数非常特殊的情况，才能不采用）；</li>
</ul>
<p><strong>注：</strong> 未明确指明的则默认为 <strong>必须（Mandatory）</strong></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="本文档参考">本文档参考<a href="https://itxx00.github.io/notes/blog/2020/01/03/shell-standards#%E6%9C%AC%E6%96%87%E6%A1%A3%E5%8F%82%E8%80%83" class="hash-link" aria-label="本文档参考的直接链接" title="本文档参考的直接链接">​</a></h3>
<p>主要参考如下文档:</p>
<ul>
<li><a href="https://google.github.io/styleguide/shell.xml" target="_blank" rel="noopener noreferrer" title="Google Shell Style Guide">Google Shell Style Guide</a></li>
<li><a href="https://wiki.bash-hackers.org/scripting/style" target="_blank" rel="noopener noreferrer" title="Scripting with style">Bash Hackers Wiki</a></li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="源文件">源文件<a href="https://itxx00.github.io/notes/blog/2020/01/03/shell-standards#%E6%BA%90%E6%96%87%E4%BB%B6" class="hash-link" aria-label="源文件的直接链接" title="源文件的直接链接">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="基础">基础<a href="https://itxx00.github.io/notes/blog/2020/01/03/shell-standards#%E5%9F%BA%E7%A1%80" class="hash-link" aria-label="基础的直接链接" title="基础的直接链接">​</a></h3>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="使用场景">使用场景<a href="https://itxx00.github.io/notes/blog/2020/01/03/shell-standards#%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF" class="hash-link" aria-label="使用场景的直接链接" title="使用场景的直接链接">​</a></h4>
<p>仅建议Shell用作相对简单的实用工具或者包装脚本。因此单个shell脚本内容不宜太过复杂。</p>
<p>在选择何时使用shell脚本时时应遵循以下原则：</p>
<ul>
<li>如主要用于调用其他工具且需处理的数据量较少，则shell是一个选择</li>
<li>如对性能十分敏感，则更推荐选择其他语言，而非shell</li>
<li>如需处理相对复杂的数据结构，则更推荐选择其他语言，而非shell</li>
<li>如脚本内容逐渐增长且有可能出现继续增长的趋势，请尽早使用其他语言重写</li>
</ul>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="文件名">文件名<a href="https://itxx00.github.io/notes/blog/2020/01/03/shell-standards#%E6%96%87%E4%BB%B6%E5%90%8D" class="hash-link" aria-label="文件名的直接链接" title="文件名的直接链接">​</a></h4>
<p>可执行文件不建议有扩展名，库文件必须使用 <strong>.sh</strong> 作为扩展名，且应是不可执行的。</p>
<p>执行一个程序时，无需知道其编写语言，且shell脚本并不要求具有扩展名，所以更倾向可执行文件没有扩展名。</p>
<p>而库文件知道其编写语言十分重要，使用 <strong>.sh</strong> 作为特定语言后缀的扩展名，可以和其他语言编写的库文件加以区分。</p>
<p>文件名要求全部小写, 可以包含下划线 <code>_</code> 或连字符 <code>-</code>, 建议可执行文件使用连字符，库文件使用下划线。</p>
<p>正例:</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">my-useful-bin</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">my_useful_libraries.sh</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">myusefullibraries.sh</span><br></span></code></pre></div></div>
<p>反例：</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">My_Useful_Bin</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">myUsefulLibraries.sh</span><br></span></code></pre></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="文件编码">文件编码<a href="https://itxx00.github.io/notes/blog/2020/01/03/shell-standards#%E6%96%87%E4%BB%B6%E7%BC%96%E7%A0%81" class="hash-link" aria-label="文件编码的直接链接" title="文件编码的直接链接">​</a></h4>
<p>源文件编码格式为<strong>UTF-8</strong>。
避免不同操作系统对文件换行处理的方式不同，一律使用<code>LF</code>。</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="单行长度">单行长度<a href="https://itxx00.github.io/notes/blog/2020/01/03/shell-standards#%E5%8D%95%E8%A1%8C%E9%95%BF%E5%BA%A6" class="hash-link" aria-label="单行长度的直接链接" title="单行长度的直接链接">​</a></h4>
<p>每行最多不超过120个字符。每行代码最大长度限制的根本原因是过长的行会导致阅读障碍，使得缩进失效。</p>
<p>除了以下两种情况例外：</p>
<ul>
<li>导入模块语句</li>
<li>注释中包含的URL</li>
</ul>
<p>如出现长度必须超过120个字符的字符串，应尽量使用here document或者嵌入的换行符等合适的方法使其变短。</p>
<p>示例：</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># DO use 'here document's</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">cat &lt;&lt;END;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">I am an exceptionally long</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">string.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">END</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># Embedded newlines are ok too</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">long_string="I am an exceptionally</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  long string."</span><br></span></code></pre></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="空白字符">空白字符<a href="https://itxx00.github.io/notes/blog/2020/01/03/shell-standards#%E7%A9%BA%E7%99%BD%E5%AD%97%E7%AC%A6" class="hash-link" aria-label="空白字符的直接链接" title="空白字符的直接链接">​</a></h4>
<p>除了在行结束使用换行符，空格是源文件中唯一允许出现的空白字符。</p>
<ul>
<li>字符串中的非空格空白字符，使用转义字符</li>
<li>不允许行前使用tab缩进，如果使用tab缩进，必须设置1个tab为4个空格</li>
<li>不应在行尾出现没有意义的空白字符</li>
</ul>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="垃圾清理--推荐--">垃圾清理<sup>  <em>推荐</em>  </sup><a href="https://itxx00.github.io/notes/blog/2020/01/03/shell-standards#%E5%9E%83%E5%9C%BE%E6%B8%85%E7%90%86--%E6%8E%A8%E8%8D%90--" class="hash-link" aria-label="垃圾清理--推荐--的直接链接" title="垃圾清理--推荐--的直接链接">​</a></h4>
<p>对从来没有用到的或者被注释的方法、变量等要坚决从代码中清理出去，避免过多垃圾造成干扰。</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="结构">结构<a href="https://itxx00.github.io/notes/blog/2020/01/03/shell-standards#%E7%BB%93%E6%9E%84" class="hash-link" aria-label="结构的直接链接" title="结构的直接链接">​</a></h3>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="使用bash">使用bash<a href="https://itxx00.github.io/notes/blog/2020/01/03/shell-standards#%E4%BD%BF%E7%94%A8bash" class="hash-link" aria-label="使用bash的直接链接" title="使用bash的直接链接">​</a></h4>
<p>Bash 是唯一被允许使用的可执行脚本shell。</p>
<p>可执行文件必须以 <code>#!/bin/bash</code> 开始。请使用 <code>set</code> 来设置shell的选项，使得用 <code>bash &lt;script_name&gt;</code> 调用你的脚本时不会破坏其功能。</p>
<p>限制所有的可执行shell脚本为bash使得我们安装在所有计算机中的shell语言保持一致性。
正例：</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">#!/bin/bash</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">set -e</span><br></span></code></pre></div></div>
<p>反例：</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">#!/bin/sh -e</span><br></span></code></pre></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="许可证或版权信息--推荐--">许可证或版权信息<sup>  <em>推荐</em>  </sup><a href="https://itxx00.github.io/notes/blog/2020/01/03/shell-standards#%E8%AE%B8%E5%8F%AF%E8%AF%81%E6%88%96%E7%89%88%E6%9D%83%E4%BF%A1%E6%81%AF--%E6%8E%A8%E8%8D%90--" class="hash-link" aria-label="许可证或版权信息--推荐--的直接链接" title="许可证或版权信息--推荐--的直接链接">​</a></h4>
<p>许可证与版权信息需放在源文件的起始位置。例如：</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">#</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># Licensed under the BSD 3-Clause License (the "License"); you may not use this file except</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># in compliance with the License. You may obtain a copy of the License at</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># https://opensource.org/licenses/BSD-3-Clause</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># Unless required by applicable law or agreed to in writing, software distributed</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># CONDITIONS OF ANY KIND, either express or implied. See the License for the</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># specific language governing permissions and limitations under the License.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="缩进">缩进<a href="https://itxx00.github.io/notes/blog/2020/01/03/shell-standards#%E7%BC%A9%E8%BF%9B" class="hash-link" aria-label="缩进的直接链接" title="缩进的直接链接">​</a></h4>
<h5 class="anchor anchorWithStickyNavbar_LWe7" id="块缩进">块缩进<a href="https://itxx00.github.io/notes/blog/2020/01/03/shell-standards#%E5%9D%97%E7%BC%A9%E8%BF%9B" class="hash-link" aria-label="块缩进的直接链接" title="块缩进的直接链接">​</a></h5>
<p>每当开始一个新的块，缩进增加4个空格（不能使用\t字符来缩进）。当块结束时，缩进返回先前的缩进级别。缩进级别适用于代码和注释。</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">main() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    # 缩进4个空格</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    say="hello"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    flag=0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    if [[ $flag = 0 ]]; then</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        # 缩进4个空格</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        echo "$say"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    fi</span><br></span></code></pre></div></div>
<h5 class="anchor anchorWithStickyNavbar_LWe7" id="管道">管道<a href="https://itxx00.github.io/notes/blog/2020/01/03/shell-standards#%E7%AE%A1%E9%81%93" class="hash-link" aria-label="管道的直接链接" title="管道的直接链接">​</a></h5>
<p>如果一行容不下整个管道操作，那么请将整个管道操作分割成每行一个管段。</p>
<p>如果一行容得下整个管道操作，那么请将整个管道操作写在同一行，管道左右应有空格。</p>
<p>否则，应该将整个管道操作分割成每行一段，管道操作的下一部分应该将管道符放在新行并且缩进4个空格。这适用于管道符 <code>|</code> 以及逻辑运算 <code>||</code> 和 <code>&amp;&amp;</code> 。
正例：</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># 单行管道连接，管道左右空格</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">command1 | command2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 长命令管道换行连接，管道放置于下一个命令开头，缩进4个空格</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">command1 \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    | command2 \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    | command3 \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    | command4</span><br></span></code></pre></div></div>
<p>反例：</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># 管道左右无空格</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">command1|command2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 换行连接管道放置于行末</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">command1 | \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    command2 | \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    command3 | \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    command4</span><br></span></code></pre></div></div>
<h5 class="anchor anchorWithStickyNavbar_LWe7" id="循环">循环<a href="https://itxx00.github.io/notes/blog/2020/01/03/shell-standards#%E5%BE%AA%E7%8E%AF" class="hash-link" aria-label="循环的直接链接" title="循环的直接链接">​</a></h5>
<p>请将 <code>; do</code> , <code>; then</code> 和 <code>while</code> , <code>for</code> , <code>if</code> 放在同一行。</p>
<p>shell中的循环略有不同，但是我们遵循跟声明函数时的大括号相同的原则。即：
<code>; do</code> , <code>; then</code> 应该和 while/for/if 放在同一行。
else 应该单独一行。
结束语句应该单独一行且跟开始语句缩进对齐。</p>
<p>正例：</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">for dir in ${dirs_to_cleanup}; do</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    if [[ -d "${dir}/${BACKUP_SID}" ]]; then</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        log_date "Cleaning up old files in ${dir}/${BACKUP_SID}"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        rm "${dir}/${BACKUP_SID}/"*</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if [[ "$?" -ne 0 ]]; then</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            error_message</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        fi</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    else</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        mkdir -p "${dir}/${BACKUP_SID}"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if [[ "$?" -ne 0 ]]; then</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            error_message</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        fi</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    fi</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">done</span><br></span></code></pre></div></div>
<p>反例：</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">function getBatchName()</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    batch_name="batch"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    if [[ "$input5"x == *$batch_name* ]]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    then</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        batch_name=$input5</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    else if [[ "$input6"x == *$batch_name* ]]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    then</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        batch_name=$input6</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    else if [[ "$input7"x == *$batch_name* ]]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    then</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        batch_name=$input7</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        fi</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        fi</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    fi</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre></div></div>
<h5 class="anchor anchorWithStickyNavbar_LWe7" id="case语句">case语句<a href="https://itxx00.github.io/notes/blog/2020/01/03/shell-standards#case%E8%AF%AD%E5%8F%A5" class="hash-link" aria-label="case语句的直接链接" title="case语句的直接链接">​</a></h5>
<p>通过4个空格缩进可选项。
可选项中的多个命令应该被拆分成多行，模式表达式、操作和结束符 <code>;;</code> 在不同的行。
匹配表达式比 case 和 esac 缩进一级。多行操作要再缩进一级。
模式表达式前面不应该出现左括号。避免使用 <code>;&amp;</code> 和 <code>;;&amp;</code> 符号。
示例：</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">case "${expression}" in</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    a)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        variable="..."</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        some_command "${variable}" "${other_expr}" ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ;;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    absolute)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        actions="relative"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        another_command "${actions}" "${other_expr}" ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ;;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    *)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        error "Unexpected expression '${expression}'"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ;;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">esac</span><br></span></code></pre></div></div>
<p>只要整个表达式可读，简单的单行命令可以跟模式和 ;; 写在同一行。当单行容不下操作时，请使用多行的写法。
单行示例：</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">verbose='false'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">aflag=''</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">bflag=''</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">files=''</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">while getopts 'abf:v' flag; do</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    case "${flag}" in</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        a) aflag='true' ;;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        b) bflag='true' ;;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        f) files="${OPTARG}" ;;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        v) verbose='true' ;;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        *) error "Unexpected option ${flag}" ;;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    esac</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">done</span><br></span></code></pre></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="函数位置">函数位置<a href="https://itxx00.github.io/notes/blog/2020/01/03/shell-standards#%E5%87%BD%E6%95%B0%E4%BD%8D%E7%BD%AE" class="hash-link" aria-label="函数位置的直接链接" title="函数位置的直接链接">​</a></h4>
<p>将文件中所有的函数统一放在常量下面。不要在函数之间隐藏可执行代码。</p>
<p>如果你有函数，请将他们统一放在文件头部。只有includes， set 声明和常量设置可能在函数声明之前完成。不要在函数之间隐藏可执行代码。如果那样做，会使得代码在调试时难以跟踪并出现意想不到的结果。</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="主函数main">主函数main<a href="https://itxx00.github.io/notes/blog/2020/01/03/shell-standards#%E4%B8%BB%E5%87%BD%E6%95%B0main" class="hash-link" aria-label="主函数main的直接链接" title="主函数main的直接链接">​</a></h4>
<p>对于包含至少了一个其他函数的足够长的脚本，建议定义一个名为 main 的函数。对于功能简单的短脚本， main函数是没有必要的。</p>
<p>为了方便查找程序的入口位置，将主程序放入一个名为 main 的函数中，作为最底部的函数。这使其和代码库的其余部分保持一致性，同时允许你定义更多变量为局部变量（如果主代码不是一个函数就不支持这种做法）。
文件中最后的非注释行应该是对 main 函数的调用：</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">main "$@"</span><br></span></code></pre></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="注释">注释<a href="https://itxx00.github.io/notes/blog/2020/01/03/shell-standards#%E6%B3%A8%E9%87%8A" class="hash-link" aria-label="注释的直接链接" title="注释的直接链接">​</a></h4>
<p>代码注释的基本原则：</p>
<ul>
<li>注释应能使代码更加明确</li>
<li>避免注释部分的过度修饰</li>
<li>保持注释部分简单、明确</li>
<li>在编码以前就应开始写注释</li>
<li>注释应说明设计思路而不是描述代码的行为</li>
</ul>
<p>注释与其周围的代码在同一缩进级别，#号与注释文本间需保持一个空格以和注释代码进行区分。</p>
<h5 class="anchor anchorWithStickyNavbar_LWe7" id="文件头">文件头<a href="https://itxx00.github.io/notes/blog/2020/01/03/shell-standards#%E6%96%87%E4%BB%B6%E5%A4%B4" class="hash-link" aria-label="文件头的直接链接" title="文件头的直接链接">​</a></h5>
<p>每个文件的开头是其文件内容的描述。除版权声明外，每个文件必须包含一个顶层注释，对其功能进行简要概述。</p>
<p>例如：</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">#!/bin/bash</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># Perform hot backups of databases.</span><br></span></code></pre></div></div>
<h5 class="anchor anchorWithStickyNavbar_LWe7" id="功能注释">功能注释<a href="https://itxx00.github.io/notes/blog/2020/01/03/shell-standards#%E5%8A%9F%E8%83%BD%E6%B3%A8%E9%87%8A" class="hash-link" aria-label="功能注释的直接链接" title="功能注释的直接链接">​</a></h5>
<p>主体脚本中除简洁明了的函数外都必须带有注释。库文件中所有函数无论其长短和复杂性都必须带有注释。</p>
<p>这使得其他人通过阅读注释即可学会如何使用你的程序或库函数，而不需要阅读代码。</p>
<p>所有的函数注释应该包含：</p>
<ul>
<li>函数的描述</li>
<li>全局变量的使用和修改</li>
<li>使用的参数说明</li>
<li>返回值，而不是上一条命令运行后默认的退出状态</li>
</ul>
<p>例如：</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">#!/bin/bash</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># Perform hot backups of databases.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">export PATH='/usr/sbin/bin:/usr/bin:/usr/local/bin'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#######################################</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># Cleanup files from the backup dir</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># Globals:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#   BACKUP_DIR</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#   BACKUP_SID</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># Arguments:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#   None</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># Returns:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#   None</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#######################################</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">cleanup() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre></div></div>
<h5 class="anchor anchorWithStickyNavbar_LWe7" id="实现部分的注释">实现部分的注释<a href="https://itxx00.github.io/notes/blog/2020/01/03/shell-standards#%E5%AE%9E%E7%8E%B0%E9%83%A8%E5%88%86%E7%9A%84%E6%B3%A8%E9%87%8A" class="hash-link" aria-label="实现部分的注释的直接链接" title="实现部分的注释的直接链接">​</a></h5>
<p>注释你代码中含有技巧、不明显、有趣的或者重要的部分。</p>
<p>这部分遵循代码注释的基本原则即可。不要注释所有代码。如果有一个复杂的不易理解的逻辑，请进行简单的注释。</p>
<h5 class="anchor anchorWithStickyNavbar_LWe7" id="todo注释">TODO注释<a href="https://itxx00.github.io/notes/blog/2020/01/03/shell-standards#todo%E6%B3%A8%E9%87%8A" class="hash-link" aria-label="TODO注释的直接链接" title="TODO注释的直接链接">​</a></h5>
<p>对那些临时的, 短期的解决方案, 或已经够好但仍不完美的代码使用 TODO 注释.</p>
<p>TODO 注释要使用全大写的字符串 TODO, 在随后的圆括号里写上你的名字,邮件地址, bug ID, 或其它身份标识和与这一 TODO 相关的 issue。
主要目的是让添加注释的人 (也是可以请求提供更多细节的人) 可根据规范的TODO 格式进行查找。
添加 TODO 注释并不意味着你要自己来修正,因此当你加上带有姓名的 TODO 时, 一般都是写上自己的名字。</p>
<p>这与<strong>C++ Style Guide</strong>中的约定相一致。</p>
<p>例如：</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># TODO(mrmonkey): Handle the unlikely edge cases (bug ####)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># TODO(--bug=123456): remove the "Last visitors" feature</span><br></span></code></pre></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="命名">命名<a href="https://itxx00.github.io/notes/blog/2020/01/03/shell-standards#%E5%91%BD%E5%90%8D" class="hash-link" aria-label="命名的直接链接" title="命名的直接链接">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="函数名">函数名<a href="https://itxx00.github.io/notes/blog/2020/01/03/shell-standards#%E5%87%BD%E6%95%B0%E5%90%8D" class="hash-link" aria-label="函数名的直接链接" title="函数名的直接链接">​</a></h3>
<p>使用小写字母，并用下划线分隔单词。使用双冒号 <code>::</code> 分隔包名。函数名之后必须有圆括号。</p>
<p>如果你正在写单个函数，请用小写字母来命名，并用下划线分隔单词。如果你正在写一个包，使用双冒号 <code>::</code> 来分隔包名。
函数名和圆括号之间没有空格，大括号必须和函数名位于同一行。
当函数名后存在 <code>()</code> 时，关键词 function 是多余的，建议不带 function 的写法，但至少做到同一项目内风格保持一致。
正例：</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># Single function</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">my_func() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># Part of a package</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mypackage::my_func() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre></div></div>
<p>反例：</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">function my_func</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="变量名">变量名<a href="https://itxx00.github.io/notes/blog/2020/01/03/shell-standards#%E5%8F%98%E9%87%8F%E5%90%8D" class="hash-link" aria-label="变量名的直接链接" title="变量名的直接链接">​</a></h3>
<p>规则同函数名一致。</p>
<p>循环中的变量名应该和正在被循环的变量名保持相似的名称。
示例：</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">for zone in ${zones}; do</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    something_with "${zone}"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">done</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="常量和环境变量名">常量和环境变量名<a href="https://itxx00.github.io/notes/blog/2020/01/03/shell-standards#%E5%B8%B8%E9%87%8F%E5%92%8C%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%90%8D" class="hash-link" aria-label="常量和环境变量名的直接链接" title="常量和环境变量名的直接链接">​</a></h3>
<p>全部大写，用下划线分隔，声明在文件的顶部。</p>
<p>常量和任何导出到环境中的变量都应该大写。
示例：</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># Constant</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">readonly PATH_TO_FILES='/some/path'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># Both constant and environment</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">declare -xr BACKUP_SID='PROD'</span><br></span></code></pre></div></div>
<p>有些情况下首次初始化及常量（例如，通过getopts），因此，在getopts中或基于条件来设定常量是可以的，但之后应该立即设置其为只读。
值得注意的是，在函数中使用 declare 对全局变量无效，所以推荐使用 readonly 和 export 来代替。
示例：</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">VERBOSE='false'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">while getopts 'v' flag; do</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  case "${flag}" in</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    v) VERBOSE='true' ;;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  esac</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">done</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">readonly VERBOSE</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="只读变量">只读变量<a href="https://itxx00.github.io/notes/blog/2020/01/03/shell-standards#%E5%8F%AA%E8%AF%BB%E5%8F%98%E9%87%8F" class="hash-link" aria-label="只读变量的直接链接" title="只读变量的直接链接">​</a></h3>
<p>使用 readonly 或者 declare -r 来确保变量只读。</p>
<p>因为全局变量在shell中广泛使用，所以在使用它们的过程中捕获错误是很重要的。当你声明了一个变量，希望其只读，那么请明确指出。
示例：</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">zip_version="$(dpkg --status zip | grep Version: | cut -d ' ' -f 2)"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">if [[ -z "${zip_version}" ]]; then</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  error_message</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">else</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  readonly zip_version</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">fi</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="局部变量">局部变量<a href="https://itxx00.github.io/notes/blog/2020/01/03/shell-standards#%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F" class="hash-link" aria-label="局部变量的直接链接" title="局部变量的直接链接">​</a></h3>
<p>每次只声明一个变量,不要使用组合声明，比如<code>a=1 b=2</code>;</p>
<p>使用 local 声明特定功能的变量。声明和赋值应该在不同行。</p>
<p>必须使用 local 来声明局部变量，以确保其只在函数内部和子函数中可见。这样可以避免污染全局名称空间以及避免无意中设置可能在函数外部具有重要意义的变量。</p>
<p>当使用命令替换进行赋值时，变量声明和赋值必须分开。因为内建的 local 不会从命令替换中传递退出码。
正例：</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">my_func2() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    local name="$1"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    # 命令替换赋值，变量声明和赋值需放到不同行:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    local my_var</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    my_var="$(my_func)" || return</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre></div></div>
<p>反例：</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">my_func2() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    # 禁止以下写法: $? 将获取到'local'指令的返回值, 而非 my_func</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    local my_var="$(my_func)"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    [[ $? -eq 0 ]] || return</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="异常与日志">异常与日志<a href="https://itxx00.github.io/notes/blog/2020/01/03/shell-standards#%E5%BC%82%E5%B8%B8%E4%B8%8E%E6%97%A5%E5%BF%97" class="hash-link" aria-label="异常与日志的直接链接" title="异常与日志的直接链接">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="异常">异常<a href="https://itxx00.github.io/notes/blog/2020/01/03/shell-standards#%E5%BC%82%E5%B8%B8" class="hash-link" aria-label="异常的直接链接" title="异常的直接链接">​</a></h3>
<p>使用shell返回值来返回异常，并根据不同的异常情况返回不同的值。</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="日志">日志<a href="https://itxx00.github.io/notes/blog/2020/01/03/shell-standards#%E6%97%A5%E5%BF%97" class="hash-link" aria-label="日志的直接链接" title="日志的直接链接">​</a></h3>
<p>所有的错误信息都应被导向到STDERR，这样将有利于出现问题时快速区分正常输出和异常输出。</p>
<p>建议使用与以下函数类似的方式来打印正常和异常输出：</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">err() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    echo "[$(date +'%FT%T%z')]: $@" &gt;&amp;2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">if ! do_something; then</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    err "Unable to do_something"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    exit "${E_DID_NOTHING}"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">fi</span><br></span></code></pre></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="编程实践--持续分类并完善--">编程实践<sup>  <em>持续分类并完善</em>  </sup><a href="https://itxx00.github.io/notes/blog/2020/01/03/shell-standards#%E7%BC%96%E7%A8%8B%E5%AE%9E%E8%B7%B5--%E6%8C%81%E7%BB%AD%E5%88%86%E7%B1%BB%E5%B9%B6%E5%AE%8C%E5%96%84--" class="hash-link" aria-label="编程实践--持续分类并完善--的直接链接" title="编程实践--持续分类并完善--的直接链接">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="变量扩展---推荐--">变量扩展 <sup>  <em>推荐</em>  </sup><a href="https://itxx00.github.io/notes/blog/2020/01/03/shell-standards#%E5%8F%98%E9%87%8F%E6%89%A9%E5%B1%95---%E6%8E%A8%E8%8D%90--" class="hash-link" aria-label="变量扩展---推荐--的直接链接" title="变量扩展---推荐--的直接链接">​</a></h3>
<p>通常情况下推荐为变量加上大括号如 <code>"${var}"</code> 而不是 <code>"$var"</code> ，但具体也要视情况而定。</p>
<p>以下按照优先顺序列出建议：</p>
<ul>
<li>与现有代码保持一致</li>
<li>单字符变量在特定情况下才需要被括起来</li>
<li>使用引号引用变量，参考下一节：变量引用</li>
</ul>
<p>详细示例如下：
正例：</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># 位置变量和特殊变量，可以不用大括号:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">echo "Positional: $1" "$5" "$3"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">echo "Specials: !=$!, -=$-, _=$_. ?=$?, #=$# *=$* @=$@ \$=$$ ..."</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 当位置变量大于等于10，则必须有大括号:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">echo "many parameters: ${10}"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 当出现歧义时，必须有大括号:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># Output is "a0b0c0"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">set -- a b c</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">echo "${1}0${2}0${3}0"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 使用变量扩展赋值时，必须有大括号：</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">DEFAULT_MEM=${DEFUALT_MEM:-"-Xms2g -Xmx2g -XX:MaxDirectMemorySize=4g"}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 其他常规变量的推荐处理方式:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">echo "PATH=${PATH}, PWD=${PWD}, mine=${some_var}"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">while read f; do</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    echo "file=${f}"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">done &lt; &lt;(ls -l /tmp)</span><br></span></code></pre></div></div>
<p>反例：</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># 无引号, 无大括号, 特殊变量，单字符变量</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">echo a=$avar "b=$bvar" "PID=${$}" "${1}"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 无大括号产生歧义场景：以下会被解析为 "${1}0${2}0${3}0",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 而非 "${10}${20}${30}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">set -- a b c</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">echo "$10$20$30"</span><br></span></code></pre></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="变量引用---推荐--">变量引用 <sup>  <em>推荐</em>  </sup><a href="https://itxx00.github.io/notes/blog/2020/01/03/shell-standards#%E5%8F%98%E9%87%8F%E5%BC%95%E7%94%A8---%E6%8E%A8%E8%8D%90--" class="hash-link" aria-label="变量引用---推荐--的直接链接" title="变量引用---推荐--的直接链接">​</a></h4>
<p>变量引用通常情况下应遵循以下原则：</p>
<ul>
<li>默认情况下推荐使用引号引用包含变量、命令替换符、空格或shell元字符的字符串</li>
<li>在有明确要求必须使用无引号扩展的情况下，可不用引号</li>
<li>字符串为单词类型时才推荐用引号，而非命令选项或者路径名</li>
<li>不要对整数使用引号</li>
<li>特别注意 <code>[[</code> 中模式匹配的引号规则</li>
<li>在无特殊情况下，推荐使用 <code>$@</code> 而非 <code>$*</code></li>
</ul>
<p>以下通过示例说明：</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># '单引号' 表示禁用变量替换</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># "双引号" 表示需要变量替换</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 示例1： 命令替换需使用双引号</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">flag="$(some_command and its args "$@" 'quoted separately')"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 示例2：常规变量需使用双引号</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">echo "${flag}"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 示例3：整数不使用引号</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">value=32</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 示例4：即便命令替换输出为整数，也需要使用引号</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">number="$(generate_number)"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 示例5：单词可以使用引号，但不作强制要求</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">readonly USE_INTEGER='true'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 示例6：输出特殊符号使用单引号或转义</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">echo 'Hello stranger, and well met. Earn lots of $$$'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">echo "Process $$: Done making \$\$\$."</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 示例7：命令参数及路径不需要引号</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">grep -li Hugo /dev/null "$1"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 示例8：常规变量用双引号，ccs可能为空的特殊情况可不用引号</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">git send-email --to "${reviewers}" ${ccs:+"--cc" "${ccs}"}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 示例9：正则用单引号，$1可能为空的特殊情况可不用引号</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">grep -cP '([Ss]pecial|\|?characters*)$' ${1:+"$1"}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 示例10：位置参数传递推荐带引号的"$@"，所有参数作为单字符串传递用带引号的"$*"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># content of t.sh</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">func_t() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    echo num: $#</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    echo args: 1:$1 2:$2 3:$3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">func_t "$@"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">func_t "$*"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 当执行 ./t.sh a b c 时输出如下：</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">num: 3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">args: 1:a 2:b 3:c</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">num: 1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">args: 1:a b c 2: 3:</span><br></span></code></pre></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="命令替换">命令替换<a href="https://itxx00.github.io/notes/blog/2020/01/03/shell-standards#%E5%91%BD%E4%BB%A4%E6%9B%BF%E6%8D%A2" class="hash-link" aria-label="命令替换的直接链接" title="命令替换的直接链接">​</a></h4>
<p>使用 <code>$(command)</code> 而不是反引号。</p>
<p>因反引号如果要嵌套则要求用反斜杠转义内部的反引号。而 <code>$(command)</code> 形式的嵌套无需转义，且可读性更高。</p>
<p>正例：</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">var="$(command "$(command1)")"</span><br></span></code></pre></div></div>
<p>反例：</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">var="`command \`command1\``"</span><br></span></code></pre></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="条件测试">条件测试<a href="https://itxx00.github.io/notes/blog/2020/01/03/shell-standards#%E6%9D%A1%E4%BB%B6%E6%B5%8B%E8%AF%95" class="hash-link" aria-label="条件测试的直接链接" title="条件测试的直接链接">​</a></h4>
<p>使用 <code>[[ ... ]]</code> ，而不是 <code>[</code> , <code>test</code> , 和 <code>/usr/bin/[</code> 。</p>
<p>因为在 <code>[[</code> 和 <code>]]</code> 之间不会出现路径扩展或单词切分，所以使用 <code>[[ ... ]]</code> 能够减少犯错。且 <code>[[ ... ]]</code> 支持正则表达式匹配，而 <code>[ ... ]</code> 不支持。
参考以下示例：</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># 示例1：正则匹配，注意右侧没有引号</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 详尽细节参考：http://tiswww.case.edu/php/chet/bash/FAQ 中E14部分</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">if [[ "filename" =~ ^[[:alnum:]]+name ]]; then</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    echo "Match"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">fi</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 示例2：严格匹配字符串"f*"(本例为不匹配)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">if [[ "filename" == "f*" ]]; then</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    echo "Match"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">fi</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 示例3：[]中右侧不加引号将出现路径扩展，如果当前目录下有f开头的多个文件将报错[: too many arguments</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">if [ "filename" == f* ]; then</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    echo "Match"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">fi</span><br></span></code></pre></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="字符串测试">字符串测试<a href="https://itxx00.github.io/notes/blog/2020/01/03/shell-standards#%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%B5%8B%E8%AF%95" class="hash-link" aria-label="字符串测试的直接链接" title="字符串测试的直接链接">​</a></h4>
<p>尽可能使用变量引用，而非字符串过滤。</p>
<p>Bash可以很好的处理空字符串测试，请使用空/非空字符串测试方法，而不是过滤字符，让代码具有更高的可读性。
正例：</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">if [[ "${my_var}" = "some_string" ]]; then</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    do_something</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">fi</span><br></span></code></pre></div></div>
<p>反例：</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">if [[ "${my_var}X" = "some_stringX" ]]; then</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    do_something</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">fi</span><br></span></code></pre></div></div>
<p>正例：</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># 使用-z测试字符串为空</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">if [[ -z "${my_var}" ]]; then</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    do_something</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">fi</span><br></span></code></pre></div></div>
<p>反例：</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># 使用空引号测试空字符串，能用但不推荐</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">if [[ "${my_var}" = "" ]]; then</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    do_something</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">fi</span><br></span></code></pre></div></div>
<p>正例：</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># 使用-n测试非空字符串</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">if [[ -n "${my_var}" ]]; then</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    do_something</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">fi</span><br></span></code></pre></div></div>
<p>反例：</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># 测试字符串非空，能用但不推荐</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">if [[ "${my_var}" ]]; then</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    do_something</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">fi</span><br></span></code></pre></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="文件名扩展">文件名扩展<a href="https://itxx00.github.io/notes/blog/2020/01/03/shell-standards#%E6%96%87%E4%BB%B6%E5%90%8D%E6%89%A9%E5%B1%95" class="hash-link" aria-label="文件名扩展的直接链接" title="文件名扩展的直接链接">​</a></h4>
<p>当进行文件名的通配符扩展时，请指定明确的路径。</p>
<p>当目录中有特殊文件名如以 <code>-</code> 开头的文件时，使用带路径的扩展通配符 <code>./*</code> 比不带路径的 <code>*</code> 要安全很多。</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># 例如目录下有以下4个文件和子目录：</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># -f  -r  somedir  somefile</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 未指定路径的通配符扩展会把-r和-f当作rm的参数，强制删除文件：</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">psa@bilby$ rm -v *</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">removed directory: `somedir'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">removed `somefile'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 而指定了路径的则不会:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">psa@bilby$ rm -v ./*</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">removed `./-f'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">removed `./-r'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">rm: cannot remove `./somedir': Is a directory</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">removed `./somefile'</span><br></span></code></pre></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="慎用eval">慎用eval<a href="https://itxx00.github.io/notes/blog/2020/01/03/shell-standards#%E6%85%8E%E7%94%A8eval" class="hash-link" aria-label="慎用eval的直接链接" title="慎用eval的直接链接">​</a></h4>
<p>应该避免使用eval。</p>
<p>Eval在用于分配变量时会修改输入内容，但设置变量的同时并不能检查这些变量是什么。
反例：</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># 以下设置的内容及成功与否并不明确</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">eval $(set_my_variables)</span><br></span></code></pre></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="慎用管道连接while循环">慎用管道连接while循环<a href="https://itxx00.github.io/notes/blog/2020/01/03/shell-standards#%E6%85%8E%E7%94%A8%E7%AE%A1%E9%81%93%E8%BF%9E%E6%8E%A5while%E5%BE%AA%E7%8E%AF" class="hash-link" aria-label="慎用管道连接while循环的直接链接" title="慎用管道连接while循环的直接链接">​</a></h4>
<p>请使用进程替换或者for循环，而不是通过管道连接while循环。</p>
<p>这是因为在管道之后的while循环中，命令是在一个子shell中运行的，因此对变量的修改是不能传递给父shell的。</p>
<p>这种管道连接while循环中的隐式子shell使得bug定位非常困难。
反例：</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">last_line='NULL'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">your_command | while read line; do</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    last_line="${line}"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">done</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 以下会输出'NULL'：</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">echo "${last_line}"</span><br></span></code></pre></div></div>
<p>如果你确定输入中不包含空格或者其他特殊符号（通常不是来自用户输入），则可以用for循环代替。
例如：</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">total=0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 仅当返回结果中无空格等特殊符号时以下可正常执行：</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">for value in $(command); do</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    total+="${value}"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">done</span><br></span></code></pre></div></div>
<p>使用进程替换可实现重定向输出，但是请将命令放入显式子shell，而非while循环创建的隐式子shell。
例如：</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">total=0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">last_file=</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 注意两个&lt;之间有空格，第一个为重定向，第二个&lt;()为进程替换</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">while read count filename; do</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    total+="${count}"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    last_file="${filename}"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">done &lt; &lt;(your_command | uniq -c)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">echo "Total = ${total}"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">echo "Last one = ${last_file}"</span><br></span></code></pre></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="检查返回值">检查返回值<a href="https://itxx00.github.io/notes/blog/2020/01/03/shell-standards#%E6%A3%80%E6%9F%A5%E8%BF%94%E5%9B%9E%E5%80%BC" class="hash-link" aria-label="检查返回值的直接链接" title="检查返回值的直接链接">​</a></h4>
<p>总是检查返回值，且提供有用的返回值。</p>
<p>对于非管道命令，使用 <code>$?</code> 或直接通过 <code>if</code> 语句来检查以保持其简洁。</p>
<p>例如：</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># 使用if语句判断执行结果</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">if ! mv "${file_list}" "${dest_dir}/" ; then</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    echo "Unable to move ${file_list} to ${dest_dir}" &gt;&amp;2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    exit "${E_BAD_MOVE}"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">fi</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 或者使用$?</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mv "${file_list}" "${dest_dir}/"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">if [[ $? -ne 0 ]]; then</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    echo "Unable to move ${file_list} to ${dest_dir}" &gt;&amp;2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    exit "${E_BAD_MOVE}"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">fi</span><br></span></code></pre></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="内建命令和外部命令">内建命令和外部命令<a href="https://itxx00.github.io/notes/blog/2020/01/03/shell-standards#%E5%86%85%E5%BB%BA%E5%91%BD%E4%BB%A4%E5%92%8C%E5%A4%96%E9%83%A8%E5%91%BD%E4%BB%A4" class="hash-link" aria-label="内建命令和外部命令的直接链接" title="内建命令和外部命令的直接链接">​</a></h4>
<p>当内建命令可以完成相同的任务时，在shell内建命令和调用外部命令之间，应尽量选择内建命令。</p>
<p>因内建命令相比外部命令而言会产生更少的依赖，且多数情况调用内建命令比调用外部命令可以获得更好的性能（通常外部命令会产生额外的进程开销）。</p>
<p>正例：</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># 使用内建的算术扩展</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">addition=$((${X} + ${Y}))</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 使用内建的字符串替换</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">substitution="${string/#foo/bar}"</span><br></span></code></pre></div></div>
<p>反例：</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># 调用外部命令进行简单的计算</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">addition="$(expr ${X} + ${Y})"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 调用外部命令进行简单的字符串替换</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">substitution="$(echo "${string}" | sed -e 's/^foo/bar/')"</span><br></span></code></pre></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="文件加载">文件加载<a href="https://itxx00.github.io/notes/blog/2020/01/03/shell-standards#%E6%96%87%E4%BB%B6%E5%8A%A0%E8%BD%BD" class="hash-link" aria-label="文件加载的直接链接" title="文件加载的直接链接">​</a></h4>
<p>加载外部库文件不建议用使用<code>.</code>，建议使用<code>source</code>，已提升可阅读性。
正例：</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">source my_libs.sh</span><br></span></code></pre></div></div>
<p>反例：</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">. my_libs.sh</span><br></span></code></pre></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="内容过滤与统计">内容过滤与统计<a href="https://itxx00.github.io/notes/blog/2020/01/03/shell-standards#%E5%86%85%E5%AE%B9%E8%BF%87%E6%BB%A4%E4%B8%8E%E7%BB%9F%E8%AE%A1" class="hash-link" aria-label="内容过滤与统计的直接链接" title="内容过滤与统计的直接链接">​</a></h4>
<p>除非必要情况，尽量使用单个命令及其参数组合来完成一项任务，而非多个命令加上管道的不必要组合。
常见的不建议的用法例如：cat和grep连用过滤字符串; cat和wc连用统计行数; grep和wc连用统计行数等。</p>
<p>正例：</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">grep net.ipv4 /etc/sysctl.conf</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">grep -c net.ipv4 /etc/sysctl.conf</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">wc -l /etc/sysctl.conf</span><br></span></code></pre></div></div>
<p>反例：</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">cat /etc/sysctl.conf | grep net.ipv4</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">grep net.ipv4 /etc/sysctl.conf | wc -l</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">cat /etc/sysctl.conf | wc -l</span><br></span></code></pre></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="正确使用返回与退出">正确使用返回与退出<a href="https://itxx00.github.io/notes/blog/2020/01/03/shell-standards#%E6%AD%A3%E7%A1%AE%E4%BD%BF%E7%94%A8%E8%BF%94%E5%9B%9E%E4%B8%8E%E9%80%80%E5%87%BA" class="hash-link" aria-label="正确使用返回与退出的直接链接" title="正确使用返回与退出的直接链接">​</a></h4>
<p>除特殊情况外，几乎所有函数都不应该使用<code>exit</code>直接退出脚本，而应该使用<code>return</code>进行返回，以便后续逻辑中可以对错误进行处理。
正例：</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># 当函数返回后可以继续执行cleanup</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">my_func() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    [[ -e /dummy ]] || return 1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">cleanup() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">my_func</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">cleanup</span><br></span></code></pre></div></div>
<p>反例：</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># 当函数退出时，cleanup将不会被执行</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">my_func() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    [[ -e /dummy ]] || exit 1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">cleanup() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">my_func</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">cleanup</span><br></span></code></pre></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="附常用工具">附：常用工具<a href="https://itxx00.github.io/notes/blog/2020/01/03/shell-standards#%E9%99%84%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7" class="hash-link" aria-label="附：常用工具的直接链接" title="附：常用工具的直接链接">​</a></h2>
<p>推荐以下工具帮助我们进行代码的规范：</p>
<ul>
<li><a href="https://shellcheck.storage.googleapis.com/index.html" target="_blank" rel="noopener noreferrer" title="shell script analysis tool">ShellCheck</a></li>
</ul>]]></content>
        <category label="bash" term="bash"/>
    </entry>
</feed>